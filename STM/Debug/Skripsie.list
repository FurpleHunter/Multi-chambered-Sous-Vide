
Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000027c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010233  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f92  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00032208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c60  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200a7  00000000  00000000  00033b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ec5  00000000  00000000  00053c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c66e6  00000000  00000000  00064aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b1d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036f8  00000000  00000000  0012b224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006074 	.word	0x08006074

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006074 	.word	0x08006074

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f001 fb46 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 fae6 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 fecc 	bl	8000f7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 fe9a 	bl	8000f1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80001e8:	f000 fca4 	bl	8000b34 <MX_TIM3_Init>
  MX_TIM2_Init();
 80001ec:	f000 fc0a 	bl	8000a04 <MX_TIM2_Init>
  MX_TIM4_Init();
 80001f0:	f000 fd38 	bl	8000c64 <MX_TIM4_Init>
  MX_TIM1_Init();
 80001f4:	f000 fb42 	bl	800087c <MX_TIM1_Init>
  MX_TIM8_Init();
 80001f8:	f000 fdcc 	bl	8000d94 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rxBuf, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	4997      	ldr	r1, [pc, #604]	; (800045c <main+0x288>)
 8000200:	4897      	ldr	r0, [pc, #604]	; (8000460 <main+0x28c>)
 8000202:	f004 fd83 	bl	8004d0c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	4896      	ldr	r0, [pc, #600]	; (8000464 <main+0x290>)
 800020a:	f003 fc35 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800020e:	2104      	movs	r1, #4
 8000210:	4894      	ldr	r0, [pc, #592]	; (8000464 <main+0x290>)
 8000212:	f003 fc31 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000216:	2108      	movs	r1, #8
 8000218:	4892      	ldr	r0, [pc, #584]	; (8000464 <main+0x290>)
 800021a:	f003 fc2d 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800021e:	210c      	movs	r1, #12
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <main+0x290>)
 8000222:	f003 fc29 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000226:	2100      	movs	r1, #0
 8000228:	488f      	ldr	r0, [pc, #572]	; (8000468 <main+0x294>)
 800022a:	f003 fc25 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800022e:	2104      	movs	r1, #4
 8000230:	488d      	ldr	r0, [pc, #564]	; (8000468 <main+0x294>)
 8000232:	f003 fc21 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000236:	2108      	movs	r1, #8
 8000238:	488b      	ldr	r0, [pc, #556]	; (8000468 <main+0x294>)
 800023a:	f003 fc1d 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800023e:	210c      	movs	r1, #12
 8000240:	4889      	ldr	r0, [pc, #548]	; (8000468 <main+0x294>)
 8000242:	f003 fc19 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000246:	2100      	movs	r1, #0
 8000248:	4888      	ldr	r0, [pc, #544]	; (800046c <main+0x298>)
 800024a:	f003 fc15 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800024e:	2104      	movs	r1, #4
 8000250:	4886      	ldr	r0, [pc, #536]	; (800046c <main+0x298>)
 8000252:	f003 fc11 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000256:	2108      	movs	r1, #8
 8000258:	4884      	ldr	r0, [pc, #528]	; (800046c <main+0x298>)
 800025a:	f003 fc0d 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800025e:	210c      	movs	r1, #12
 8000260:	4882      	ldr	r0, [pc, #520]	; (800046c <main+0x298>)
 8000262:	f003 fc09 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000266:	2100      	movs	r1, #0
 8000268:	4881      	ldr	r0, [pc, #516]	; (8000470 <main+0x29c>)
 800026a:	f003 fc05 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800026e:	2104      	movs	r1, #4
 8000270:	487f      	ldr	r0, [pc, #508]	; (8000470 <main+0x29c>)
 8000272:	f003 fc01 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000276:	2108      	movs	r1, #8
 8000278:	487d      	ldr	r0, [pc, #500]	; (8000470 <main+0x29c>)
 800027a:	f003 fbfd 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800027e:	2100      	movs	r1, #0
 8000280:	487c      	ldr	r0, [pc, #496]	; (8000474 <main+0x2a0>)
 8000282:	f003 fbf9 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000286:	2108      	movs	r1, #8
 8000288:	487a      	ldr	r0, [pc, #488]	; (8000474 <main+0x2a0>)
 800028a:	f003 fbf5 	bl	8003a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800028e:	210c      	movs	r1, #12
 8000290:	4878      	ldr	r0, [pc, #480]	; (8000474 <main+0x2a0>)
 8000292:	f003 fbf1 	bl	8003a78 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART();
 8000296:	f000 ff47 	bl	8001128 <UART>

	  //On off control
	  if ((wavecount < PWM1) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 800029a:	4b77      	ldr	r3, [pc, #476]	; (8000478 <main+0x2a4>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b77      	ldr	r3, [pc, #476]	; (800047c <main+0x2a8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	da10      	bge.n	80002c8 <main+0xf4>
 80002a6:	4b76      	ldr	r3, [pc, #472]	; (8000480 <main+0x2ac>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d10c      	bne.n	80002c8 <main+0xf4>
 80002ae:	4b75      	ldr	r3, [pc, #468]	; (8000484 <main+0x2b0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d108      	bne.n	80002c8 <main+0xf4>
 80002b6:	4b74      	ldr	r3, [pc, #464]	; (8000488 <main+0x2b4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d104      	bne.n	80002c8 <main+0xf4>
		  htim1.Instance->CCR1 = 9999;
 80002be:	4b6c      	ldr	r3, [pc, #432]	; (8000470 <main+0x29c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if ((wavecount == PWM1) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 80002c8:	4b6b      	ldr	r3, [pc, #428]	; (8000478 <main+0x2a4>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b6b      	ldr	r3, [pc, #428]	; (800047c <main+0x2a8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d10f      	bne.n	80002f4 <main+0x120>
 80002d4:	4b6a      	ldr	r3, [pc, #424]	; (8000480 <main+0x2ac>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d10b      	bne.n	80002f4 <main+0x120>
 80002dc:	4b69      	ldr	r3, [pc, #420]	; (8000484 <main+0x2b0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d107      	bne.n	80002f4 <main+0x120>
 80002e4:	4b68      	ldr	r3, [pc, #416]	; (8000488 <main+0x2b4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d103      	bne.n	80002f4 <main+0x120>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80002ec:	2100      	movs	r1, #0
 80002ee:	4860      	ldr	r0, [pc, #384]	; (8000470 <main+0x29c>)
 80002f0:	f003 fcce 	bl	8003c90 <HAL_TIM_PWM_Stop>
	  }

	  if ((wavecount < PWM2) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 80002f4:	4b60      	ldr	r3, [pc, #384]	; (8000478 <main+0x2a4>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b64      	ldr	r3, [pc, #400]	; (800048c <main+0x2b8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	da10      	bge.n	8000322 <main+0x14e>
 8000300:	4b5f      	ldr	r3, [pc, #380]	; (8000480 <main+0x2ac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10c      	bne.n	8000322 <main+0x14e>
 8000308:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <main+0x2b0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d108      	bne.n	8000322 <main+0x14e>
 8000310:	4b5d      	ldr	r3, [pc, #372]	; (8000488 <main+0x2b4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d104      	bne.n	8000322 <main+0x14e>
		  htim1.Instance->CCR2 = 9999;
 8000318:	4b55      	ldr	r3, [pc, #340]	; (8000470 <main+0x29c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if ((wavecount == PWM2) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 8000322:	4b55      	ldr	r3, [pc, #340]	; (8000478 <main+0x2a4>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b59      	ldr	r3, [pc, #356]	; (800048c <main+0x2b8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d10f      	bne.n	800034e <main+0x17a>
 800032e:	4b54      	ldr	r3, [pc, #336]	; (8000480 <main+0x2ac>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10b      	bne.n	800034e <main+0x17a>
 8000336:	4b53      	ldr	r3, [pc, #332]	; (8000484 <main+0x2b0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d107      	bne.n	800034e <main+0x17a>
 800033e:	4b52      	ldr	r3, [pc, #328]	; (8000488 <main+0x2b4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d103      	bne.n	800034e <main+0x17a>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000346:	2104      	movs	r1, #4
 8000348:	4849      	ldr	r0, [pc, #292]	; (8000470 <main+0x29c>)
 800034a:	f003 fca1 	bl	8003c90 <HAL_TIM_PWM_Stop>
	  }

	  if ((wavecount < PWM3) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 800034e:	4b4a      	ldr	r3, [pc, #296]	; (8000478 <main+0x2a4>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b4f      	ldr	r3, [pc, #316]	; (8000490 <main+0x2bc>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	da10      	bge.n	800037c <main+0x1a8>
 800035a:	4b49      	ldr	r3, [pc, #292]	; (8000480 <main+0x2ac>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d10c      	bne.n	800037c <main+0x1a8>
 8000362:	4b48      	ldr	r3, [pc, #288]	; (8000484 <main+0x2b0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d108      	bne.n	800037c <main+0x1a8>
 800036a:	4b47      	ldr	r3, [pc, #284]	; (8000488 <main+0x2b4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d104      	bne.n	800037c <main+0x1a8>
		  htim1.Instance->CCR3 = 9999;
 8000372:	4b3f      	ldr	r3, [pc, #252]	; (8000470 <main+0x29c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f242 720f 	movw	r2, #9999	; 0x270f
 800037a:	63da      	str	r2, [r3, #60]	; 0x3c
	  }
	  if ((wavecount == PWM3) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 800037c:	4b3e      	ldr	r3, [pc, #248]	; (8000478 <main+0x2a4>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b43      	ldr	r3, [pc, #268]	; (8000490 <main+0x2bc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	429a      	cmp	r2, r3
 8000386:	d10f      	bne.n	80003a8 <main+0x1d4>
 8000388:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <main+0x2ac>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d10b      	bne.n	80003a8 <main+0x1d4>
 8000390:	4b3c      	ldr	r3, [pc, #240]	; (8000484 <main+0x2b0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d107      	bne.n	80003a8 <main+0x1d4>
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <main+0x2b4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d103      	bne.n	80003a8 <main+0x1d4>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80003a0:	2108      	movs	r1, #8
 80003a2:	4833      	ldr	r0, [pc, #204]	; (8000470 <main+0x29c>)
 80003a4:	f003 fc74 	bl	8003c90 <HAL_TIM_PWM_Stop>
	  }

	  if ((wavecount == 100) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 80003a8:	4b33      	ldr	r3, [pc, #204]	; (8000478 <main+0x2a4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b64      	cmp	r3, #100	; 0x64
 80003ae:	d11a      	bne.n	80003e6 <main+0x212>
 80003b0:	4b33      	ldr	r3, [pc, #204]	; (8000480 <main+0x2ac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d116      	bne.n	80003e6 <main+0x212>
 80003b8:	4b32      	ldr	r3, [pc, #200]	; (8000484 <main+0x2b0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d112      	bne.n	80003e6 <main+0x212>
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <main+0x2b4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10e      	bne.n	80003e6 <main+0x212>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003c8:	2100      	movs	r1, #0
 80003ca:	4829      	ldr	r0, [pc, #164]	; (8000470 <main+0x29c>)
 80003cc:	f003 fb54 	bl	8003a78 <HAL_TIM_PWM_Start>
          HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003d0:	2104      	movs	r1, #4
 80003d2:	4827      	ldr	r0, [pc, #156]	; (8000470 <main+0x29c>)
 80003d4:	f003 fb50 	bl	8003a78 <HAL_TIM_PWM_Start>
          HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003d8:	2108      	movs	r1, #8
 80003da:	4825      	ldr	r0, [pc, #148]	; (8000470 <main+0x29c>)
 80003dc:	f003 fb4c 	bl	8003a78 <HAL_TIM_PWM_Start>
		  wavecount = 0;
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <main+0x2a4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
	  }



	  if ((flag == 1) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 80003e6:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <main+0x2c0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d113      	bne.n	8000416 <main+0x242>
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <main+0x2ac>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d10f      	bne.n	8000416 <main+0x242>
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <main+0x2b0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10b      	bne.n	8000416 <main+0x242>
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <main+0x2b4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d107      	bne.n	8000416 <main+0x242>
		  wavecount += 1;
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <main+0x2a4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <main+0x2a4>)
 800040e:	6013      	str	r3, [r2, #0]
		  flag = 0;
 8000410:	4b20      	ldr	r3, [pc, #128]	; (8000494 <main+0x2c0>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
	  }

	  if((PWM1 > 0) && (PWM2 > 0) && (PWM3 > 0)){
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <main+0x2a8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	f340 80f1 	ble.w	8000602 <main+0x42e>
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <main+0x2b8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	f340 80ec 	ble.w	8000602 <main+0x42e>
 800042a:	4b19      	ldr	r3, [pc, #100]	; (8000490 <main+0x2bc>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	f340 80e7 	ble.w	8000602 <main+0x42e>
		  if (((HAL_GetTick() - Motor1LastOn) >= 18000) && (MotorOneState == 0) && (MotorTwoState == 0) && (MotorThreeState == 0)){
 8000434:	f001 fa72 	bl	800191c <HAL_GetTick>
 8000438:	4602      	mov	r2, r0
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <main+0x2c4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	f244 624f 	movw	r2, #17999	; 0x464f
 8000444:	4293      	cmp	r3, r2
 8000446:	d946      	bls.n	80004d6 <main+0x302>
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <main+0x2ac>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d142      	bne.n	80004d6 <main+0x302>
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <main+0x2b0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d13e      	bne.n	80004d6 <main+0x302>
 8000458:	e020      	b.n	800049c <main+0x2c8>
 800045a:	bf00      	nop
 800045c:	20000230 	.word	0x20000230
 8000460:	200001a8 	.word	0x200001a8
 8000464:	200000c4 	.word	0x200000c4
 8000468:	20000110 	.word	0x20000110
 800046c:	20000078 	.word	0x20000078
 8000470:	2000002c 	.word	0x2000002c
 8000474:	2000015c 	.word	0x2000015c
 8000478:	20000254 	.word	0x20000254
 800047c:	20000258 	.word	0x20000258
 8000480:	2000027c 	.word	0x2000027c
 8000484:	20000280 	.word	0x20000280
 8000488:	20000284 	.word	0x20000284
 800048c:	2000025c 	.word	0x2000025c
 8000490:	20000260 	.word	0x20000260
 8000494:	20000250 	.word	0x20000250
 8000498:	20000264 	.word	0x20000264
 800049c:	4b99      	ldr	r3, [pc, #612]	; (8000704 <main+0x530>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d118      	bne.n	80004d6 <main+0x302>
		  		  MotorOneState = 1;
 80004a4:	4b98      	ldr	r3, [pc, #608]	; (8000708 <main+0x534>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
		  		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80004aa:	2100      	movs	r1, #0
 80004ac:	4897      	ldr	r0, [pc, #604]	; (800070c <main+0x538>)
 80004ae:	f003 fbef 	bl	8003c90 <HAL_TIM_PWM_Stop>
		  		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80004b2:	2104      	movs	r1, #4
 80004b4:	4895      	ldr	r0, [pc, #596]	; (800070c <main+0x538>)
 80004b6:	f003 fbeb 	bl	8003c90 <HAL_TIM_PWM_Stop>
		  		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80004ba:	2108      	movs	r1, #8
 80004bc:	4893      	ldr	r0, [pc, #588]	; (800070c <main+0x538>)
 80004be:	f003 fbe7 	bl	8003c90 <HAL_TIM_PWM_Stop>
		  		  htim8.Instance->CCR1 = 6000;
 80004c2:	4b93      	ldr	r3, [pc, #588]	; (8000710 <main+0x53c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f241 7270 	movw	r2, #6000	; 0x1770
 80004ca:	635a      	str	r2, [r3, #52]	; 0x34
		  		  Motor1LastOff = HAL_GetTick();
 80004cc:	f001 fa26 	bl	800191c <HAL_GetTick>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a90      	ldr	r2, [pc, #576]	; (8000714 <main+0x540>)
 80004d4:	6013      	str	r3, [r2, #0]
		  	  }
		  	  if (((HAL_GetTick() - Motor1LastOff) >= 3000) && MotorOneState == 1){
 80004d6:	f001 fa21 	bl	800191c <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	4b8d      	ldr	r3, [pc, #564]	; (8000714 <main+0x540>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d912      	bls.n	8000510 <main+0x33c>
 80004ea:	4b87      	ldr	r3, [pc, #540]	; (8000708 <main+0x534>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10e      	bne.n	8000510 <main+0x33c>
		  		  MotorTwoState = 1;
 80004f2:	4b89      	ldr	r3, [pc, #548]	; (8000718 <main+0x544>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
		  		  MotorOneState = 0;
 80004f8:	4b83      	ldr	r3, [pc, #524]	; (8000708 <main+0x534>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		  		  htim8.Instance->CCR1 = 0;
 80004fe:	4b84      	ldr	r3, [pc, #528]	; (8000710 <main+0x53c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
		  		  Motor2LastOn = HAL_GetTick();
 8000506:	f001 fa09 	bl	800191c <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a83      	ldr	r2, [pc, #524]	; (800071c <main+0x548>)
 800050e:	6013      	str	r3, [r2, #0]
		  	  }
		  	  if (((HAL_GetTick() - Motor2LastOn) >= 1500) && MotorTwoState == 1){
 8000510:	f001 fa04 	bl	800191c <HAL_GetTick>
 8000514:	4602      	mov	r2, r0
 8000516:	4b81      	ldr	r3, [pc, #516]	; (800071c <main+0x548>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	f240 52db 	movw	r2, #1499	; 0x5db
 8000520:	4293      	cmp	r3, r2
 8000522:	d910      	bls.n	8000546 <main+0x372>
 8000524:	4b7c      	ldr	r3, [pc, #496]	; (8000718 <main+0x544>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10c      	bne.n	8000546 <main+0x372>
		  		  MotorTwoState = 2;
 800052c:	4b7a      	ldr	r3, [pc, #488]	; (8000718 <main+0x544>)
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
		  		  htim8.Instance->CCR3 = 6000;
 8000532:	4b77      	ldr	r3, [pc, #476]	; (8000710 <main+0x53c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f241 7270 	movw	r2, #6000	; 0x1770
 800053a:	63da      	str	r2, [r3, #60]	; 0x3c
		  		  Motor2LastOff = HAL_GetTick();
 800053c:	f001 f9ee 	bl	800191c <HAL_GetTick>
 8000540:	4603      	mov	r3, r0
 8000542:	4a77      	ldr	r2, [pc, #476]	; (8000720 <main+0x54c>)
 8000544:	6013      	str	r3, [r2, #0]
		  	  }
		  	  if (((HAL_GetTick() - Motor2LastOff) >= 3000) && MotorTwoState == 2){
 8000546:	f001 f9e9 	bl	800191c <HAL_GetTick>
 800054a:	4602      	mov	r2, r0
 800054c:	4b74      	ldr	r3, [pc, #464]	; (8000720 <main+0x54c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000556:	4293      	cmp	r3, r2
 8000558:	d912      	bls.n	8000580 <main+0x3ac>
 800055a:	4b6f      	ldr	r3, [pc, #444]	; (8000718 <main+0x544>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d10e      	bne.n	8000580 <main+0x3ac>
		  		  MotorThreeState = 1;
 8000562:	4b68      	ldr	r3, [pc, #416]	; (8000704 <main+0x530>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
		  		  MotorTwoState = 0;
 8000568:	4b6b      	ldr	r3, [pc, #428]	; (8000718 <main+0x544>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
		  		  htim8.Instance->CCR3 = 0;
 800056e:	4b68      	ldr	r3, [pc, #416]	; (8000710 <main+0x53c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	; 0x3c
		  		  Motor3LastOn = HAL_GetTick();
 8000576:	f001 f9d1 	bl	800191c <HAL_GetTick>
 800057a:	4603      	mov	r3, r0
 800057c:	4a69      	ldr	r2, [pc, #420]	; (8000724 <main+0x550>)
 800057e:	6013      	str	r3, [r2, #0]
		  	  }
		  	  if (((HAL_GetTick() - Motor3LastOn) >= 1500) && MotorThreeState == 1){
 8000580:	f001 f9cc 	bl	800191c <HAL_GetTick>
 8000584:	4602      	mov	r2, r0
 8000586:	4b67      	ldr	r3, [pc, #412]	; (8000724 <main+0x550>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	f240 52db 	movw	r2, #1499	; 0x5db
 8000590:	4293      	cmp	r3, r2
 8000592:	d910      	bls.n	80005b6 <main+0x3e2>
 8000594:	4b5b      	ldr	r3, [pc, #364]	; (8000704 <main+0x530>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10c      	bne.n	80005b6 <main+0x3e2>
		  		  MotorThreeState = 2;
 800059c:	4b59      	ldr	r3, [pc, #356]	; (8000704 <main+0x530>)
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
		  		  htim8.Instance->CCR4 = 6000;
 80005a2:	4b5b      	ldr	r3, [pc, #364]	; (8000710 <main+0x53c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f241 7270 	movw	r2, #6000	; 0x1770
 80005aa:	641a      	str	r2, [r3, #64]	; 0x40
		  		  Motor3LastOff = HAL_GetTick();
 80005ac:	f001 f9b6 	bl	800191c <HAL_GetTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a5d      	ldr	r2, [pc, #372]	; (8000728 <main+0x554>)
 80005b4:	6013      	str	r3, [r2, #0]
		  	  }
		  	  if (((HAL_GetTick() - Motor3LastOff) >= 3000) && MotorThreeState == 2){
 80005b6:	f001 f9b1 	bl	800191c <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <main+0x554>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d91b      	bls.n	8000602 <main+0x42e>
 80005ca:	4b4e      	ldr	r3, [pc, #312]	; (8000704 <main+0x530>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d117      	bne.n	8000602 <main+0x42e>
		  		  htim8.Instance->CCR4 = 0;
 80005d2:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <main+0x53c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
		  		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005da:	2100      	movs	r1, #0
 80005dc:	484b      	ldr	r0, [pc, #300]	; (800070c <main+0x538>)
 80005de:	f003 fa4b 	bl	8003a78 <HAL_TIM_PWM_Start>
		  		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005e2:	2104      	movs	r1, #4
 80005e4:	4849      	ldr	r0, [pc, #292]	; (800070c <main+0x538>)
 80005e6:	f003 fa47 	bl	8003a78 <HAL_TIM_PWM_Start>
		  		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005ea:	2108      	movs	r1, #8
 80005ec:	4847      	ldr	r0, [pc, #284]	; (800070c <main+0x538>)
 80005ee:	f003 fa43 	bl	8003a78 <HAL_TIM_PWM_Start>
		  		  Motor1LastOn = HAL_GetTick();
 80005f2:	f001 f993 	bl	800191c <HAL_GetTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <main+0x558>)
 80005fa:	6013      	str	r3, [r2, #0]
		  		  MotorThreeState = 0;
 80005fc:	4b41      	ldr	r3, [pc, #260]	; (8000704 <main+0x530>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	  //	  ADCfunc();



	  //LED Statuses
	  if (status == -1){
 8000602:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <main+0x55c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060a:	d10f      	bne.n	800062c <main+0x458>
		  htim3.Instance->CCR1 = 255;
 800060c:	4b49      	ldr	r3, [pc, #292]	; (8000734 <main+0x560>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
		  htim3.Instance->CCR3 = 255;
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <main+0x560>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim4.Instance->CCR3 = 255;
 800061c:	4b46      	ldr	r3, [pc, #280]	; (8000738 <main+0x564>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim2.Instance->CCR2 = 255;
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <main+0x568>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	22ff      	movs	r2, #255	; 0xff
 800062a:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if (status != 1){
 800062c:	4b40      	ldr	r3, [pc, #256]	; (8000730 <main+0x55c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d003      	beq.n	800063c <main+0x468>
		  htim2.Instance->CCR2 = 0;
 8000634:	4b41      	ldr	r3, [pc, #260]	; (800073c <main+0x568>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if (status == 1){
 800063c:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <main+0x55c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10b      	bne.n	800065c <main+0x488>
		    htim3.Instance->CCR1 = 0;
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <main+0x560>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
		    htim3.Instance->CCR2 = 255;
 800064c:	4b39      	ldr	r3, [pc, #228]	; (8000734 <main+0x560>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	639a      	str	r2, [r3, #56]	; 0x38
		  	htim3.Instance->CCR4 = 0;
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <main+0x560>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	641a      	str	r2, [r3, #64]	; 0x40
  	  }
	  if (status == 2){
 800065c:	4b34      	ldr	r3, [pc, #208]	; (8000730 <main+0x55c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d10b      	bne.n	800067c <main+0x4a8>
		  	htim3.Instance->CCR1 = 255;
 8000664:	4b33      	ldr	r3, [pc, #204]	; (8000734 <main+0x560>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
		  	htim3.Instance->CCR2 = 165;
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <main+0x560>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	22a5      	movs	r2, #165	; 0xa5
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
		  	htim3.Instance->CCR4 = 0;
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <main+0x560>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  if (status == 3){
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <main+0x55c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d10b      	bne.n	800069c <main+0x4c8>
			htim3.Instance->CCR1 = 255;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0x560>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	22ff      	movs	r2, #255	; 0xff
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = 0;
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <main+0x560>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR4 = 0;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <main+0x560>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  if (status == 4){
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <main+0x55c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	d10b      	bne.n	80006bc <main+0x4e8>
			htim3.Instance->CCR3 = 0;
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <main+0x560>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR1 = 255;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <main+0x564>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 = 0;
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <main+0x564>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if (status == 5){
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <main+0x55c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10b      	bne.n	80006dc <main+0x508>
			htim3.Instance->CCR3 = 255;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <main+0x560>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR1 = 165;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <main+0x564>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	22a5      	movs	r2, #165	; 0xa5
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <main+0x564>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2200      	movs	r2, #0
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if (status == 6){
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <main+0x55c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <main+0x528>
			htim3.Instance->CCR3 = 255;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <main+0x560>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR1 = 0;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <main+0x564>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 = 0;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <main+0x564>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if (status == 7){
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <main+0x55c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b07      	cmp	r3, #7
 8000702:	e01d      	b.n	8000740 <main+0x56c>
 8000704:	20000284 	.word	0x20000284
 8000708:	2000027c 	.word	0x2000027c
 800070c:	2000002c 	.word	0x2000002c
 8000710:	2000015c 	.word	0x2000015c
 8000714:	20000268 	.word	0x20000268
 8000718:	20000280 	.word	0x20000280
 800071c:	2000026c 	.word	0x2000026c
 8000720:	20000270 	.word	0x20000270
 8000724:	20000274 	.word	0x20000274
 8000728:	20000278 	.word	0x20000278
 800072c:	20000264 	.word	0x20000264
 8000730:	20000000 	.word	0x20000000
 8000734:	200000c4 	.word	0x200000c4
 8000738:	20000110 	.word	0x20000110
 800073c:	20000078 	.word	0x20000078
 8000740:	d10b      	bne.n	800075a <main+0x586>
			htim4.Instance->CCR3 = 0;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <main+0x5cc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2200      	movs	r2, #0
 8000748:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR4 = 255;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <main+0x5cc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR1 = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <main+0x5d0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (status == 8){
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <main+0x5d4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b08      	cmp	r3, #8
 8000760:	d10b      	bne.n	800077a <main+0x5a6>
			htim4.Instance->CCR3 = 255;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0x5cc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR4 = 165;
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <main+0x5cc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22a5      	movs	r2, #165	; 0xa5
 8000770:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR1 = 0;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x5d0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (status == 9){
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <main+0x5d4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b09      	cmp	r3, #9
 8000780:	f47f ad89 	bne.w	8000296 <main+0xc2>
			htim4.Instance->CCR3 = 255;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <main+0x5cc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR4 = 0;
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <main+0x5cc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR1 = 0;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <main+0x5d0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	; 0x34
	  UART();
 800079c:	e57b      	b.n	8000296 <main+0xc2>
 800079e:	bf00      	nop
 80007a0:	20000110 	.word	0x20000110
 80007a4:	20000078 	.word	0x20000078
 80007a8:	20000000 	.word	0x20000000

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0a6      	sub	sp, #152	; 0x98
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fc52 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2258      	movs	r2, #88	; 0x58
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 fc44 	bl	8006064 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fbd4 	bl	8001fb8 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000816:	f000 fd6f 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fc12 	bl	8003060 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000842:	f000 fd59 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <SystemClock_Config+0xcc>)
 8000848:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800084e:	2300      	movs	r3, #0
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800085a:	2300      	movs	r3, #0
 800085c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fe33 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800086c:	f000 fd44 	bl	80012f8 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3798      	adds	r7, #152	; 0x98
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	00303002 	.word	0x00303002

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09a      	sub	sp, #104	; 0x68
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	222c      	movs	r2, #44	; 0x2c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fbd4 	bl	8006064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008bc:	4b4f      	ldr	r3, [pc, #316]	; (80009fc <MX_TIM1_Init+0x180>)
 80008be:	4a50      	ldr	r2, [pc, #320]	; (8000a00 <MX_TIM1_Init+0x184>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <MX_TIM1_Init+0x180>)
 80008c4:	228f      	movs	r2, #143	; 0x8f
 80008c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <MX_TIM1_Init+0x180>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80008ce:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <MX_TIM1_Init+0x180>)
 80008d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b49      	ldr	r3, [pc, #292]	; (80009fc <MX_TIM1_Init+0x180>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008dc:	4b47      	ldr	r3, [pc, #284]	; (80009fc <MX_TIM1_Init+0x180>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e2:	4b46      	ldr	r3, [pc, #280]	; (80009fc <MX_TIM1_Init+0x180>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e8:	4844      	ldr	r0, [pc, #272]	; (80009fc <MX_TIM1_Init+0x180>)
 80008ea:	f003 f80d 	bl	8003908 <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 fd00 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000902:	4619      	mov	r1, r3
 8000904:	483d      	ldr	r0, [pc, #244]	; (80009fc <MX_TIM1_Init+0x180>)
 8000906:	f003 fb73 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000910:	f000 fcf2 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000914:	4839      	ldr	r0, [pc, #228]	; (80009fc <MX_TIM1_Init+0x180>)
 8000916:	f003 f84e 	bl	80039b6 <HAL_TIM_PWM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000920:	f000 fcea 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000930:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000934:	4619      	mov	r1, r3
 8000936:	4831      	ldr	r0, [pc, #196]	; (80009fc <MX_TIM1_Init+0x180>)
 8000938:	f004 f888 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000942:	f000 fcd9 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	; 0x60
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <MX_TIM1_Init+0x180>)
 800096c:	f003 fa2c 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000976:	f000 fcbf 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800097e:	2204      	movs	r2, #4
 8000980:	4619      	mov	r1, r3
 8000982:	481e      	ldr	r0, [pc, #120]	; (80009fc <MX_TIM1_Init+0x180>)
 8000984:	f003 fa20 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800098e:	f000 fcb3 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000996:	2208      	movs	r2, #8
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_TIM1_Init+0x180>)
 800099c:	f003 fa14 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80009a6:	f000 fca7 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM1_Init+0x180>)
 80009e0:	f004 f8c0 	bl	8004b64 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80009ea:	f000 fc85 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM1_Init+0x180>)
 80009f0:	f000 fd1a 	bl	8001428 <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3768      	adds	r7, #104	; 0x68
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5e:	4834      	ldr	r0, [pc, #208]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a60:	f002 ff52 	bl	8003908 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 fc45 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482d      	ldr	r0, [pc, #180]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a7c:	f003 fab8 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a86:	f000 fc37 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a8a:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000a8c:	f002 ff93 	bl	80039b6 <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a96:	f000 fc2f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000aaa:	f003 ffcf 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ab4:	f000 fc20 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	; 0x60
 8000aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000ad0:	f003 f97a 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ada:	f000 fc0d 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000ae6:	f003 f96f 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000af0:	f000 fc02 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2208      	movs	r2, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000afc:	f003 f964 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b06:	f000 fbf7 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000b12:	f003 f959 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b1c:	f000 fbec 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM2_Init+0x12c>)
 8000b22:	f000 fc81 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000078 	.word	0x20000078

08000b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b66:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b68:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <MX_TIM3_Init+0x12c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b8c:	4833      	ldr	r0, [pc, #204]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000b8e:	f002 febb 	bl	8003908 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b98:	f000 fbae 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	482c      	ldr	r0, [pc, #176]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000baa:	f003 fa21 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bb4:	f000 fba0 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000bba:	f002 fefc 	bl	80039b6 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bc4:	f000 fb98 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000bd8:	f003 ff38 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000be2:	f000 fb89 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000bfe:	f003 f8e3 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c08:	f000 fb76 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000c14:	f003 f8d8 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c1e:	f000 fb6b 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2208      	movs	r2, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000c2a:	f003 f8cd 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000c34:	f000 fb60 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000c40:	f003 f8c2 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000c4a:	f000 fb55 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM3_Init+0x128>)
 8000c50:	f000 fbea 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000c4 	.word	0x200000c4
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000c98:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <MX_TIM4_Init+0x12c>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9c:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 512;
 8000ca8:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cbc:	4833      	ldr	r0, [pc, #204]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000cbe:	f002 fe23 	bl	8003908 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000cc8:	f000 fb16 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482c      	ldr	r0, [pc, #176]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000cda:	f003 f989 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ce4:	f000 fb08 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ce8:	4828      	ldr	r0, [pc, #160]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000cea:	f002 fe64 	bl	80039b6 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000cf4:	f000 fb00 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4821      	ldr	r0, [pc, #132]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d08:	f003 fea0 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d12:	f000 faf1 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d2e:	f003 f84b 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d38:	f000 fade 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d44:	f003 f840 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000d4e:	f000 fad3 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2208      	movs	r2, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d5a:	f003 f835 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000d64:	f000 fac8 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d70:	f003 f82a 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000d7a:	f000 fabd 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM4_Init+0x128>)
 8000d80:	f000 fb52 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000110 	.word	0x20000110
 8000d90:	40000800 	.word	0x40000800

08000d94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09a      	sub	sp, #104	; 0x68
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	222c      	movs	r2, #44	; 0x2c
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f005 f948 	bl	8006064 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <MX_TIM8_Init+0x184>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dda:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000de8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e00:	4844      	ldr	r0, [pc, #272]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e02:	f002 fd81 	bl	8003908 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f000 fa74 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	483d      	ldr	r0, [pc, #244]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e1e:	f003 f8e7 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e28:	f000 fa66 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e2c:	4839      	ldr	r0, [pc, #228]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e2e:	f002 fdc2 	bl	80039b6 <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e38:	f000 fa5e 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4831      	ldr	r0, [pc, #196]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e50:	f003 fdfc 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e5a:	f000 fa4d 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e84:	f002 ffa0 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000e8e:	f000 fa33 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e96:	2208      	movs	r2, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000e9c:	f002 ff94 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000ea6:	f000 fa27 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eae:	220c      	movs	r2, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000eb4:	f002 ff88 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8000ebe:	f000 fa1b 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000ef8:	f003 fe34 	bl	8004b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000f02:	f000 f9f9 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_TIM8_Init+0x180>)
 8000f08:	f000 fa8e 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3768      	adds	r7, #104	; 0x68
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000015c 	.word	0x2000015c
 8000f18:	40013400 	.word	0x40013400

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <MX_USART2_UART_Init+0x5c>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f60:	f003 fe86 	bl	8004c70 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 f9c5 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001a8 	.word	0x200001a8
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <MX_GPIO_Init+0xf0>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a35      	ldr	r2, [pc, #212]	; (800106c <MX_GPIO_Init+0xf0>)
 8000f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ff8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0xf4>)
 800100a:	f000 fe1b 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Crossover_Pin */
  GPIO_InitStruct.Pin = Crossover_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001012:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Crossover_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_GPIO_Init+0xf4>)
 8001024:	f000 fe0e 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0xf8>)
 8001040:	f000 fe00 	bl	8001c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	200a      	movs	r0, #10
 800104a:	f000 fd4e 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800104e:	200a      	movs	r0, #10
 8001050:	f000 fd67 	bl	8001b22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2028      	movs	r0, #40	; 0x28
 800105a:	f000 fd46 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105e:	2028      	movs	r0, #40	; 0x28
 8001060:	f000 fd5f 	bl	8001b22 <HAL_NVIC_EnableIRQ>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000800 	.word	0x48000800
 8001074:	48000400 	.word	0x48000400

08001078 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	store_message();
 8001080:	f000 f80e 	bl	80010a0 <store_message>
	HAL_UART_Receive_IT(&huart2, rxBuf, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	4904      	ldr	r1, [pc, #16]	; (8001098 <HAL_UART_RxCpltCallback+0x20>)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <HAL_UART_RxCpltCallback+0x24>)
 800108a:	f003 fe3f 	bl	8004d0c <HAL_UART_Receive_IT>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000230 	.word	0x20000230
 800109c:	200001a8 	.word	0x200001a8

080010a0 <store_message>:

void store_message(){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	if(rxBuf[0] == 35){
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <store_message+0x78>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b23      	cmp	r3, #35	; 0x23
 80010aa:	d110      	bne.n	80010ce <store_message+0x2e>
		cur_indicator = 0;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <store_message+0x7c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
		message[cur_indicator] = rxBuf[0];
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <store_message+0x7c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <store_message+0x78>)
 80010ba:	7819      	ldrb	r1, [r3, #0]
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <store_message+0x80>)
 80010be:	5499      	strb	r1, [r3, r2]
		cur_indicator++;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <store_message+0x7c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <store_message+0x7c>)
 80010ca:	701a      	strb	r2, [r3, #0]
		cur_indicator++;
	} else if (rxBuf[0] == 36){
		message[cur_indicator] = rxBuf[0];
		message_complete=1;
	}
}
 80010cc:	e01f      	b.n	800110e <store_message+0x6e>
	} else if(rxBuf[0] != 36){
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <store_message+0x78>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b24      	cmp	r3, #36	; 0x24
 80010d4:	d00d      	beq.n	80010f2 <store_message+0x52>
		message[cur_indicator] = rxBuf[0];
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <store_message+0x7c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <store_message+0x78>)
 80010de:	7819      	ldrb	r1, [r3, #0]
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <store_message+0x80>)
 80010e2:	5499      	strb	r1, [r3, r2]
		cur_indicator++;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <store_message+0x7c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <store_message+0x7c>)
 80010ee:	701a      	strb	r2, [r3, #0]
}
 80010f0:	e00d      	b.n	800110e <store_message+0x6e>
	} else if (rxBuf[0] == 36){
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <store_message+0x78>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b24      	cmp	r3, #36	; 0x24
 80010f8:	d109      	bne.n	800110e <store_message+0x6e>
		message[cur_indicator] = rxBuf[0];
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <store_message+0x7c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <store_message+0x78>)
 8001102:	7819      	ldrb	r1, [r3, #0]
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <store_message+0x80>)
 8001106:	5499      	strb	r1, [r3, r2]
		message_complete=1;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <store_message+0x84>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000230 	.word	0x20000230
 800111c:	20000231 	.word	0x20000231
 8001120:	20000234 	.word	0x20000234
 8001124:	2000022c 	.word	0x2000022c

08001128 <UART>:

void UART(){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	if(message_complete == 1){
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <UART+0x150>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f040 809c 	bne.w	800126e <UART+0x146>

		if (message[2] == 80 && message[3] == 87 && message[4] == 77){
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <UART+0x154>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	2b50      	cmp	r3, #80	; 0x50
 800113c:	f040 8094 	bne.w	8001268 <UART+0x140>
 8001140:	4b4e      	ldr	r3, [pc, #312]	; (800127c <UART+0x154>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b57      	cmp	r3, #87	; 0x57
 8001146:	f040 808f 	bne.w	8001268 <UART+0x140>
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <UART+0x154>)
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	2b4d      	cmp	r3, #77	; 0x4d
 8001150:	f040 808a 	bne.w	8001268 <UART+0x140>
			if (message[6] == 48){
 8001154:	4b49      	ldr	r3, [pc, #292]	; (800127c <UART+0x154>)
 8001156:	799b      	ldrb	r3, [r3, #6]
 8001158:	2b30      	cmp	r3, #48	; 0x30
 800115a:	d129      	bne.n	80011b0 <UART+0x88>
				//HAL_UART_Transmit(&huart2,(uint8_t*)test,5,50);
				PWM1 = (message[7] - 48)*100 + (message[8] - 48)*10 + (message[9] - 48);
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <UART+0x154>)
 800115e:	79db      	ldrb	r3, [r3, #7]
 8001160:	3b30      	subs	r3, #48	; 0x30
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	fb02 f103 	mul.w	r1, r2, r3
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <UART+0x154>)
 800116a:	7a1b      	ldrb	r3, [r3, #8]
 800116c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	18ca      	adds	r2, r1, r3
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <UART+0x154>)
 800117c:	7a5b      	ldrb	r3, [r3, #9]
 800117e:	3b30      	subs	r3, #48	; 0x30
 8001180:	4413      	add	r3, r2
 8001182:	4a3f      	ldr	r2, [pc, #252]	; (8001280 <UART+0x158>)
 8001184:	6013      	str	r3, [r2, #0]
				if (message[17] == 48){
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <UART+0x154>)
 8001188:	7c5b      	ldrb	r3, [r3, #17]
 800118a:	2b30      	cmp	r3, #48	; 0x30
 800118c:	d102      	bne.n	8001194 <UART+0x6c>
					status = 1;
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <UART+0x15c>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 49){
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <UART+0x154>)
 8001196:	7c5b      	ldrb	r3, [r3, #17]
 8001198:	2b31      	cmp	r3, #49	; 0x31
 800119a:	d102      	bne.n	80011a2 <UART+0x7a>
					status = 2;
 800119c:	4b39      	ldr	r3, [pc, #228]	; (8001284 <UART+0x15c>)
 800119e:	2202      	movs	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 50){
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <UART+0x154>)
 80011a4:	7c5b      	ldrb	r3, [r3, #17]
 80011a6:	2b32      	cmp	r3, #50	; 0x32
 80011a8:	d102      	bne.n	80011b0 <UART+0x88>
					status = 3;
 80011aa:	4b36      	ldr	r3, [pc, #216]	; (8001284 <UART+0x15c>)
 80011ac:	2203      	movs	r2, #3
 80011ae:	601a      	str	r2, [r3, #0]
				}
			}
			if (message[6] == 49){
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <UART+0x154>)
 80011b2:	799b      	ldrb	r3, [r3, #6]
 80011b4:	2b31      	cmp	r3, #49	; 0x31
 80011b6:	d129      	bne.n	800120c <UART+0xe4>
				PWM2 = (message[7] - 48)*100 + (message[8] - 48)*10 + (message[9] - 48);
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <UART+0x154>)
 80011ba:	79db      	ldrb	r3, [r3, #7]
 80011bc:	3b30      	subs	r3, #48	; 0x30
 80011be:	2264      	movs	r2, #100	; 0x64
 80011c0:	fb02 f103 	mul.w	r1, r2, r3
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <UART+0x154>)
 80011c6:	7a1b      	ldrb	r3, [r3, #8]
 80011c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	18ca      	adds	r2, r1, r3
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <UART+0x154>)
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	3b30      	subs	r3, #48	; 0x30
 80011dc:	4413      	add	r3, r2
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <UART+0x160>)
 80011e0:	6013      	str	r3, [r2, #0]
				if (message[17] == 48){
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <UART+0x154>)
 80011e4:	7c5b      	ldrb	r3, [r3, #17]
 80011e6:	2b30      	cmp	r3, #48	; 0x30
 80011e8:	d102      	bne.n	80011f0 <UART+0xc8>
					status = 4;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <UART+0x15c>)
 80011ec:	2204      	movs	r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 49){
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <UART+0x154>)
 80011f2:	7c5b      	ldrb	r3, [r3, #17]
 80011f4:	2b31      	cmp	r3, #49	; 0x31
 80011f6:	d102      	bne.n	80011fe <UART+0xd6>
					status = 5;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <UART+0x15c>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 50){
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <UART+0x154>)
 8001200:	7c5b      	ldrb	r3, [r3, #17]
 8001202:	2b32      	cmp	r3, #50	; 0x32
 8001204:	d102      	bne.n	800120c <UART+0xe4>
					status = 6;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <UART+0x15c>)
 8001208:	2206      	movs	r2, #6
 800120a:	601a      	str	r2, [r3, #0]
				}
			}
			if (message[6] == 50){
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <UART+0x154>)
 800120e:	799b      	ldrb	r3, [r3, #6]
 8001210:	2b32      	cmp	r3, #50	; 0x32
 8001212:	d129      	bne.n	8001268 <UART+0x140>
				PWM3 = (message[7] - 48)*100 + (message[8] - 48)*10 + (message[9] - 48);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <UART+0x154>)
 8001216:	79db      	ldrb	r3, [r3, #7]
 8001218:	3b30      	subs	r3, #48	; 0x30
 800121a:	2264      	movs	r2, #100	; 0x64
 800121c:	fb02 f103 	mul.w	r1, r2, r3
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <UART+0x154>)
 8001222:	7a1b      	ldrb	r3, [r3, #8]
 8001224:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	18ca      	adds	r2, r1, r3
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <UART+0x154>)
 8001234:	7a5b      	ldrb	r3, [r3, #9]
 8001236:	3b30      	subs	r3, #48	; 0x30
 8001238:	4413      	add	r3, r2
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <UART+0x164>)
 800123c:	6013      	str	r3, [r2, #0]
				if (message[17] == 48){
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <UART+0x154>)
 8001240:	7c5b      	ldrb	r3, [r3, #17]
 8001242:	2b30      	cmp	r3, #48	; 0x30
 8001244:	d102      	bne.n	800124c <UART+0x124>
					status = 7;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <UART+0x15c>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 49){
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <UART+0x154>)
 800124e:	7c5b      	ldrb	r3, [r3, #17]
 8001250:	2b31      	cmp	r3, #49	; 0x31
 8001252:	d102      	bne.n	800125a <UART+0x132>
					status = 8;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <UART+0x15c>)
 8001256:	2208      	movs	r2, #8
 8001258:	601a      	str	r2, [r3, #0]
				}
				if (message[17] == 50){
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <UART+0x154>)
 800125c:	7c5b      	ldrb	r3, [r3, #17]
 800125e:	2b32      	cmp	r3, #50	; 0x32
 8001260:	d102      	bne.n	8001268 <UART+0x140>
					status = 9;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <UART+0x15c>)
 8001264:	2209      	movs	r2, #9
 8001266:	601a      	str	r2, [r3, #0]
				}
			}

		}
		message_complete = 0;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <UART+0x150>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	}
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	2000022c 	.word	0x2000022c
 800127c:	20000234 	.word	0x20000234
 8001280:	20000258 	.word	0x20000258
 8001284:	20000000 	.word	0x20000000
 8001288:	2000025c 	.word	0x2000025c
 800128c:	20000260 	.word	0x20000260

08001290 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4){
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2b10      	cmp	r3, #16
 800129e:	d121      	bne.n	80012e4 <HAL_GPIO_EXTI_Callback+0x54>
		if ((prevOn == 0)  && (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == 1)){
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_GPIO_EXTI_Callback+0x5c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10c      	bne.n	80012c2 <HAL_GPIO_EXTI_Callback+0x32>
 80012a8:	2110      	movs	r1, #16
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80012ac:	f000 fe54 	bl	8001f58 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_GPIO_EXTI_Callback+0x32>
			flag = 1;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
			//ZeroCrossTime = HAL_GetTick();
			//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
			//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
			prevOn = 1;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_GPIO_EXTI_Callback+0x5c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
		}
		if ((prevOn == 1)  && (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == 0)){
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_GPIO_EXTI_Callback+0x5c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10c      	bne.n	80012e4 <HAL_GPIO_EXTI_Callback+0x54>
 80012ca:	2110      	movs	r1, #16
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80012ce:	f000 fe43 	bl	8001f58 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_GPIO_EXTI_Callback+0x54>
			flag = 1;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
			//ZeroCrossTime = HAL_GetTick();
			//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
			//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
			prevOn = 0;
 80012de:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GPIO_EXTI_Callback+0x5c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000024c 	.word	0x2000024c
 80012f0:	48000800 	.word	0x48000800
 80012f4:	20000250 	.word	0x20000250

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x44>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133a:	2007      	movs	r0, #7
 800133c:	f000 fbca 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <HAL_TIM_Base_MspInit+0xc8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10c      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 8001364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001376:	e046      	b.n	8001406 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d10c      	bne.n	800139c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
}
 800139a:	e034      	b.n	8001406 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_TIM_Base_MspInit+0xd0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10c      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
}
 80013be:	e022      	b.n	8001406 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a16      	ldr	r2, [pc, #88]	; (8001420 <HAL_TIM_Base_MspInit+0xd4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10c      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
}
 80013e2:	e010      	b.n	8001406 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10b      	bne.n	8001406 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_TIM_Base_MspInit+0xcc>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	bf00      	nop
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40000400 	.word	0x40000400
 8001420:	40000800 	.word	0x40000800
 8001424:	40013400 	.word	0x40013400

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a9a      	ldr	r2, [pc, #616]	; (80016b0 <HAL_TIM_MspPostInit+0x288>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11c      	bne.n	8001484 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b9a      	ldr	r3, [pc, #616]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a99      	ldr	r2, [pc, #612]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Heat1_Pin|Heat2_Pin|Heat3_Pin;
 8001462:	2307      	movs	r3, #7
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001472:	2302      	movs	r3, #2
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	488e      	ldr	r0, [pc, #568]	; (80016b8 <HAL_TIM_MspPostInit+0x290>)
 800147e:	f000 fbe1 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001482:	e110      	b.n	80016a6 <HAL_TIM_MspPostInit+0x27e>
  else if(htim->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d14c      	bne.n	8001528 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a88      	ldr	r2, [pc, #544]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b86      	ldr	r3, [pc, #536]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b83      	ldr	r3, [pc, #524]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4a82      	ldr	r2, [pc, #520]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6153      	str	r3, [r2, #20]
 80014b2:	4b80      	ldr	r3, [pc, #512]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = BlueLED3_Pin|RedLED4_Pin;
 80014be:	2303      	movs	r3, #3
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fbb2 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BlueLED4_Pin;
 80014e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f2:	2301      	movs	r3, #1
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(BlueLED4_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fa:	4619      	mov	r1, r3
 80014fc:	486f      	ldr	r0, [pc, #444]	; (80016bc <HAL_TIM_MspPostInit+0x294>)
 80014fe:	f000 fba1 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GreenLED4_Pin;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001514:	230a      	movs	r3, #10
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GreenLED4_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f000 fb8f 	bl	8001c44 <HAL_GPIO_Init>
}
 8001526:	e0be      	b.n	80016a6 <HAL_TIM_MspPostInit+0x27e>
  else if(htim->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a64      	ldr	r2, [pc, #400]	; (80016c0 <HAL_TIM_MspPostInit+0x298>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d138      	bne.n	80015a4 <HAL_TIM_MspPostInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6153      	str	r3, [r2, #20]
 800153e:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RedLED2_Pin|BlueLED1_Pin;
 8001562:	2303      	movs	r3, #3
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001572:	2302      	movs	r3, #2
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157a:	4619      	mov	r1, r3
 800157c:	484f      	ldr	r0, [pc, #316]	; (80016bc <HAL_TIM_MspPostInit+0x294>)
 800157e:	f000 fb61 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RedLED1_Pin|GreenLED1_Pin;
 8001582:	23c0      	movs	r3, #192	; 0xc0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001592:	2302      	movs	r3, #2
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	4619      	mov	r1, r3
 800159c:	4846      	ldr	r0, [pc, #280]	; (80016b8 <HAL_TIM_MspPostInit+0x290>)
 800159e:	f000 fb51 	bl	8001c44 <HAL_GPIO_Init>
}
 80015a2:	e080      	b.n	80016a6 <HAL_TIM_MspPostInit+0x27e>
  else if(htim->Instance==TIM4)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_TIM_MspPostInit+0x29c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d13b      	bne.n	8001626 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6153      	str	r3, [r2, #20]
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a3a      	ldr	r2, [pc, #232]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GreenLED2_Pin|BlueLED2_Pin;
 80015de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80015f0:	230a      	movs	r3, #10
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f000 fb21 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RedLED3_Pin|GreenLED3_Pin;
 8001602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001614:	2302      	movs	r3, #2
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	4827      	ldr	r0, [pc, #156]	; (80016bc <HAL_TIM_MspPostInit+0x294>)
 8001620:	f000 fb10 	bl	8001c44 <HAL_GPIO_Init>
}
 8001624:	e03f      	b.n	80016a6 <HAL_TIM_MspPostInit+0x27e>
  else if(htim->Instance==TIM8)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_TIM_MspPostInit+0x2a0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13a      	bne.n	80016a6 <HAL_TIM_MspPostInit+0x27e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163a:	6153      	str	r3, [r2, #20]
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001652:	6153      	str	r3, [r2, #20]
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_TIM_MspPostInit+0x28c>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor2_Pin|Motor3_Pin;
 8001660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001672:	2304      	movs	r3, #4
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	4619      	mov	r1, r3
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <HAL_TIM_MspPostInit+0x290>)
 800167e:	f000 fae1 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor1_Pin;
 8001682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001694:	2302      	movs	r3, #2
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Motor1_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f000 facf 	bl	8001c44 <HAL_GPIO_Init>
}
 80016a6:	bf00      	nop
 80016a8:	3740      	adds	r7, #64	; 0x40
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000400 	.word	0x48000400
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40013400 	.word	0x40013400

080016cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_UART_MspInit+0x8c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d130      	bne.n	8001750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_UART_MspInit+0x90>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_UART_MspInit+0x90>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_UART_MspInit+0x90>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x90>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0x90>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_UART_MspInit+0x90>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f000 fa82 	bl	8001c44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2026      	movs	r0, #38	; 0x26
 8001746:	f000 f9d0 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800174a:	2026      	movs	r0, #38	; 0x26
 800174c:	f000 f9e9 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004400 	.word	0x40004400
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f8a2 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Crossover_Pin);
 80017b8:	2010      	movs	r0, #16
 80017ba:	f000 fbe5 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART2_IRQHandler+0x10>)
 80017ca:	f003 faed 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001a8 	.word	0x200001a8

080017d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80017dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017e0:	f000 fbd2 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e8:	f000 fbce 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopForever+0x6>)
  ldr r1, =_edata
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <LoopForever+0xa>)
  ldr r2, =_sidata
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <LoopForever+0xe>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001830:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <LoopForever+0x16>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183e:	f7ff ffd7 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f004 fbeb 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001846:	f7fe fcc5 	bl	80001d4 <main>

0800184a <LoopForever>:

LoopForever:
    b LoopForever
 800184a:	e7fe      	b.n	800184a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800184c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001858:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 800185c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001860:	2000028c 	.word	0x2000028c

08001864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_2_IRQHandler>
	...

08001868 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_Init+0x28>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_Init+0x28>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f92b 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fd3e 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f943 	bl	8001b3e <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f90b 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000288 	.word	0x20000288

0800191c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000288 	.word	0x20000288

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff29 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff3e 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff31 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e020      	b.n	8001bbc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 020e 	bic.w	r2, r2, #14
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d005      	beq.n	8001bea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e027      	b.n	8001c3a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020e 	bic.w	r2, r2, #14
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
    } 
  }
  return status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e160      	b.n	8001f16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8152 	beq.w	8001f10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d005      	beq.n	8001c84 <HAL_GPIO_Init+0x40>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d130      	bne.n	8001ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 0201 	and.w	r2, r3, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d017      	beq.n	8001d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d123      	bne.n	8001d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	6939      	ldr	r1, [r7, #16]
 8001d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80ac 	beq.w	8001f10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a5d      	ldr	r2, [pc, #372]	; (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd0:	4a59      	ldr	r2, [pc, #356]	; (8001f38 <HAL_GPIO_Init+0x2f4>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dfa:	d025      	beq.n	8001e48 <HAL_GPIO_Init+0x204>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x2f8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d01f      	beq.n	8001e44 <HAL_GPIO_Init+0x200>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x2fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d019      	beq.n	8001e40 <HAL_GPIO_Init+0x1fc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x300>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1f4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x308>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1f0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1ec>
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	e00c      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e30:	2307      	movs	r3, #7
 8001e32:	e00a      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e34:	2305      	movs	r3, #5
 8001e36:	e008      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e006      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e004      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_GPIO_Init+0x206>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	f002 0203 	and.w	r2, r2, #3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4093      	lsls	r3, r2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5a:	4937      	ldr	r1, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x2f4>)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e8c:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb6:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f ae97 	bne.w	8001c54 <HAL_GPIO_Init+0x10>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	48000800 	.word	0x48000800
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	48001000 	.word	0x48001000
 8001f4c:	48001400 	.word	0x48001400
 8001f50:	48001800 	.word	0x48001800
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f972 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f001 b83a 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 816f 	beq.w	80022d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff4:	4bb5      	ldr	r3, [pc, #724]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4bb2      	ldr	r3, [pc, #712]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d15c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x10e>
 800200c:	4baf      	ldr	r3, [pc, #700]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d155      	bne.n	80020c6 <HAL_RCC_OscConfig+0x10e>
 800201a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_RCC_OscConfig+0x94>
 8002046:	4ba1      	ldr	r3, [pc, #644]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0xc0>
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002068:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002074:	4b95      	ldr	r3, [pc, #596]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002080:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002084:	fa92 f2a2 	rbit	r2, r2
 8002088:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800208c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8111 	beq.w	80022d0 <HAL_RCC_OscConfig+0x318>
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8108 	bne.w	80022d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f000 bfc6 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12e>
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7b      	ldr	r2, [pc, #492]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e036      	b.n	8002154 <HAL_RCC_OscConfig+0x19c>
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x158>
 80020f6:	4b75      	ldr	r3, [pc, #468]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a74      	ldr	r2, [pc, #464]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b72      	ldr	r3, [pc, #456]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a71      	ldr	r2, [pc, #452]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e021      	b.n	8002154 <HAL_RCC_OscConfig+0x19c>
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x184>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x19c>
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a62      	ldr	r2, [pc, #392]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b60      	ldr	r3, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002152:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d059      	beq.n	8002218 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fbda 	bl	800191c <HAL_GetTick>
 8002168:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216e:	f7ff fbd5 	bl	800191c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d902      	bls.n	8002184 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f000 bf67 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002188:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002198:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0x1fe>
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x22a>
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80021ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80021ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80021f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ab      	beq.n	800216e <HAL_RCC_OscConfig+0x1b6>
 8002216:	e05c      	b.n	80022d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fb80 	bl	800191c <HAL_GetTick>
 800221c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002222:	f7ff fb7b 	bl	800191c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d902      	bls.n	8002238 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	f000 bf0d 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800224c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_RCC_OscConfig+0x2b2>
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x2de>
 800226a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800227e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002282:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002286:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_RCC_OscConfig+0x314>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800229a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800229e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80022a2:	fa92 f2a2 	rbit	r2, r2
 80022a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80022aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022ae:	fab2 f282 	clz	r2, r2
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f042 0220 	orr.w	r2, r2, #32
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f002 021f 	and.w	r2, r2, #31
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ab      	bne.n	8002222 <HAL_RCC_OscConfig+0x26a>
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_OscConfig+0x31a>
 80022cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 817f 	beq.w	80025e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022e8:	4ba7      	ldr	r3, [pc, #668]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00c      	beq.n	800230e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f4:	4ba4      	ldr	r3, [pc, #656]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d173      	bne.n	80023e8 <HAL_RCC_OscConfig+0x430>
 8002300:	4ba1      	ldr	r3, [pc, #644]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230c:	d16c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x430>
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002320:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x386>
 8002338:	4b93      	ldr	r3, [pc, #588]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e013      	b.n	8002366 <HAL_RCC_OscConfig+0x3ae>
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002356:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2202      	movs	r2, #2
 8002368:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800236c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002370:	fa92 f2a2 	rbit	r2, r2
 8002374:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002378:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f002 021f 	and.w	r2, r2, #31
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCC_OscConfig+0x3f6>
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d002      	beq.n	80023ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f000 be52 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	21f8      	movs	r1, #248	; 0xf8
 80023c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80023cc:	fa91 f1a1 	rbit	r1, r1
 80023d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80023d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023d8:	fab1 f181 	clz	r1, r1
 80023dc:	b2c9      	uxtb	r1, r1
 80023de:	408b      	lsls	r3, r1
 80023e0:	4969      	ldr	r1, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	e0fe      	b.n	80025e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8088 	beq.w	800250a <HAL_RCC_OscConfig+0x552>
 80023fa:	2301      	movs	r3, #1
 80023fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800240c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2301      	movs	r3, #1
 8002424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fa79 	bl	800191c <HAL_GetTick>
 800242a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff fa74 	bl	800191c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d902      	bls.n	8002446 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	f000 be06 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002458:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x4be>
 8002470:	4b45      	ldr	r3, [pc, #276]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e013      	b.n	800249e <HAL_RCC_OscConfig+0x4e6>
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002488:	2302      	movs	r3, #2
 800248a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800248e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2202      	movs	r2, #2
 80024a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80024a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80024b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f042 0220 	orr.w	r2, r2, #32
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f002 021f 	and.w	r2, r2, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0af      	beq.n	8002430 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	21f8      	movs	r1, #248	; 0xf8
 80024e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80024ee:	fa91 f1a1 	rbit	r1, r1
 80024f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80024f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024fa:	fab1 f181 	clz	r1, r1
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	408b      	lsls	r3, r1
 8002502:	4921      	ldr	r1, [pc, #132]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e06d      	b.n	80025e6 <HAL_RCC_OscConfig+0x62e>
 800250a:	2301      	movs	r3, #1
 800250c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800251c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800252a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff f9f1 	bl	800191c <HAL_GetTick>
 800253a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff f9ec 	bl	800191c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f000 bd7e 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_RCC_OscConfig+0x5d4>
 8002580:	4b01      	ldr	r3, [pc, #4]	; (8002588 <HAL_RCC_OscConfig+0x5d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	e016      	b.n	80025b4 <HAL_RCC_OscConfig+0x5fc>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025b0:	4bbf      	ldr	r3, [pc, #764]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2202      	movs	r2, #2
 80025b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80025ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80025be:	fa92 f2a2 	rbit	r2, r2
 80025c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80025c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ac      	bne.n	8002540 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8113 	beq.w	8002822 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002600:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d07c      	beq.n	8002706 <HAL_RCC_OscConfig+0x74e>
 800260c:	2301      	movs	r3, #1
 800260e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800261e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4ba2      	ldr	r3, [pc, #648]	; (80028b4 <HAL_RCC_OscConfig+0x8fc>)
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff f971 	bl	800191c <HAL_GetTick>
 800263a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff f96c 	bl	800191c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d902      	bls.n	8002656 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	f000 bcfe 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800269a:	2202      	movs	r2, #2
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 80026b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026c2:	2102      	movs	r1, #2
 80026c4:	6019      	str	r1, [r3, #0]
 80026c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f1a3 	rbit	r1, r3
 80026d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026dc:	6019      	str	r1, [r3, #0]
  return result;
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d09d      	beq.n	8002640 <HAL_RCC_OscConfig+0x688>
 8002704:	e08d      	b.n	8002822 <HAL_RCC_OscConfig+0x86a>
 8002706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002728:	601a      	str	r2, [r3, #0]
  return result;
 800272a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002732:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_OscConfig+0x8fc>)
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	461a      	mov	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7ff f8e8 	bl	800191c <HAL_GetTick>
 800274c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002752:	f7ff f8e3 	bl	800191c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	f000 bc75 	b.w	8003052 <HAL_RCC_OscConfig+0x109a>
 8002768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002770:	2202      	movs	r2, #2
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002778:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027b8:	2202      	movs	r2, #2
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 80027d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027e0:	2102      	movs	r1, #2
 80027e2:	6019      	str	r1, [r3, #0]
 80027e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f1a3 	rbit	r1, r3
 80027f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027fa:	6019      	str	r1, [r3, #0]
  return result;
 80027fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002800:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d197      	bne.n	8002752 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 81a5 	beq.w	8002b82 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x8f8>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800285e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002870:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_OscConfig+0x900>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d121      	bne.n	80028c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCC_OscConfig+0x900>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x900>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002890:	f7ff f844 	bl	800191c <HAL_GetTick>
 8002894:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	e010      	b.n	80028bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289a:	f7ff f83f 	bl	800191c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d908      	bls.n	80028bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e3d1      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	10908120 	.word	0x10908120
 80028b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b8d      	ldr	r3, [pc, #564]	; (8002af4 <HAL_RCC_OscConfig+0xb3c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0e8      	beq.n	800289a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x92e>
 80028d8:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a86      	ldr	r2, [pc, #536]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e035      	b.n	8002952 <HAL_RCC_OscConfig+0x99a>
 80028e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x958>
 80028f6:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a7f      	ldr	r2, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	e020      	b.n	8002952 <HAL_RCC_OscConfig+0x99a>
 8002910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d10c      	bne.n	800293a <HAL_RCC_OscConfig+0x982>
 8002920:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a74      	ldr	r2, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a71      	ldr	r2, [pc, #452]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	e00b      	b.n	8002952 <HAL_RCC_OscConfig+0x99a>
 800293a:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8081 	beq.w	8002a66 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe ffda 	bl	800191c <HAL_GetTick>
 8002968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe ffd5 	bl	800191c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e365      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 8002986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800298e:	2202      	movs	r2, #2
 8002990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029b2:	2202      	movs	r2, #2
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029cc:	601a      	str	r2, [r3, #0]
  return result;
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_OscConfig+0xa3a>
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	e013      	b.n	8002a1a <HAL_RCC_OscConfig+0xa62>
 80029f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a22:	2102      	movs	r1, #2
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fa92 f1a2 	rbit	r1, r2
 8002a34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a38:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a3c:	6011      	str	r1, [r2, #0]
  return result;
 8002a3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a42:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f002 021f 	and.w	r2, r2, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d084      	beq.n	800296e <HAL_RCC_OscConfig+0x9b6>
 8002a64:	e083      	b.n	8002b6e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a66:	f7fe ff59 	bl	800191c <HAL_GetTick>
 8002a6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe ff54 	bl	800191c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e2e4      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a90:	2202      	movs	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002abc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ace:	601a      	str	r2, [r3, #0]
  return result;
 8002ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ad8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0xb44>
 8002aee:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_RCC_OscConfig+0xb40>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	e017      	b.n	8002b24 <HAL_RCC_OscConfig+0xb6c>
 8002af4:	40007000 	.word	0x40007000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b04:	2202      	movs	r2, #2
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	4bb3      	ldr	r3, [pc, #716]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	6011      	str	r1, [r2, #0]
 8002b30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	fa92 f1a2 	rbit	r1, r2
 8002b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b42:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002b46:	6011      	str	r1, [r2, #0]
  return result;
 8002b48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b4c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d180      	bne.n	8002a70 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	4b9e      	ldr	r3, [pc, #632]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4a9d      	ldr	r2, [pc, #628]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 825e 	beq.w	8003050 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b94:	4b96      	ldr	r3, [pc, #600]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	f000 821f 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	f040 8170 	bne.w	8002e94 <HAL_RCC_OscConfig+0xedc>
 8002bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bd8:	601a      	str	r2, [r3, #0]
  return result;
 8002bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bde:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002be2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fe8f 	bl	800191c <HAL_GetTick>
 8002bfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	e009      	b.n	8002c18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fe8a 	bl	800191c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e21c      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0xcaa>
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e027      	b.n	8002cb2 <HAL_RCC_OscConfig+0xcfa>
 8002c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c74:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cbe:	6011      	str	r1, [r2, #0]
 8002cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fa92 f1a2 	rbit	r1, r2
 8002cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cd2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002cd6:	6011      	str	r1, [r2, #0]
  return result;
 8002cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cdc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d182      	bne.n	8002c04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4937      	ldr	r1, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a19      	ldr	r1, [r3, #32]
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	492d      	ldr	r1, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d64:	601a      	str	r2, [r3, #0]
  return result;
 8002d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fdc9 	bl	800191c <HAL_GetTick>
 8002d8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8e:	e009      	b.n	8002da4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fdc4 	bl	800191c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e156      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 8002da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dc8:	601a      	str	r2, [r3, #0]
  return result;
 8002dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0xe3c>
 8002de8:	4b01      	ldr	r3, [pc, #4]	; (8002df0 <HAL_RCC_OscConfig+0xe38>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	e02a      	b.n	8002e44 <HAL_RCC_OscConfig+0xe8c>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b86      	ldr	r3, [pc, #536]	; (800305c <HAL_RCC_OscConfig+0x10a4>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f43f af7f 	beq.w	8002d90 <HAL_RCC_OscConfig+0xdd8>
 8002e92:	e0dd      	b.n	8003050 <HAL_RCC_OscConfig+0x1098>
 8002e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002eb8:	601a      	str	r2, [r3, #0]
  return result;
 8002eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ec2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ece:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fd1f 	bl	800191c <HAL_GetTick>
 8002ede:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fd1a 	bl	800191c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0ac      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
 8002ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fa93 f2a3 	rbit	r2, r3
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f1c:	601a      	str	r2, [r3, #0]
  return result;
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_OscConfig+0xf8a>
 8002f3c:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_OscConfig+0x10a4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	e027      	b.n	8002f92 <HAL_RCC_OscConfig+0xfda>
 8002f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x10a4>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f9e:	6011      	str	r1, [r2, #0]
 8002fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fa4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fa92 f1a2 	rbit	r1, r2
 8002fae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fb2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002fb6:	6011      	str	r1, [r2, #0]
  return result;
 8002fb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fbc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d182      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xf2c>
 8002fde:	e037      	b.n	8003050 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e02e      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_OscConfig+0x10a4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_RCC_OscConfig+0x10a4>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003008:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	429a      	cmp	r2, r3
 800301a:	d117      	bne.n	800304c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800301c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003020:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003030:	429a      	cmp	r2, r3
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003040:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b09e      	sub	sp, #120	; 0x78
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e162      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	498b      	ldr	r1, [pc, #556]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b89      	ldr	r3, [pc, #548]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e14a      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b82      	ldr	r3, [pc, #520]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	497f      	ldr	r1, [pc, #508]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80dc 	beq.w	800328c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d13c      	bne.n	8003156 <HAL_RCC_ClockConfig+0xf6>
 80030dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <HAL_RCC_ClockConfig+0xa6>
 8003100:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	e00f      	b.n	8003126 <HAL_RCC_ClockConfig+0xc6>
 8003106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	667b      	str	r3, [r7, #100]	; 0x64
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
 800311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003122:	4b67      	ldr	r3, [pc, #412]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312a:	65ba      	str	r2, [r7, #88]	; 0x58
 800312c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800312e:	fa92 f2a2 	rbit	r2, r2
 8003132:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f042 0220 	orr.w	r2, r2, #32
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f002 021f 	and.w	r2, r2, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d17b      	bne.n	800324a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0f3      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d13c      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x178>
 800315e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800316c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d102      	bne.n	8003188 <HAL_RCC_ClockConfig+0x128>
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e00f      	b.n	80031a8 <HAL_RCC_ClockConfig+0x148>
 8003188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f002 021f 	and.w	r2, r2, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13a      	bne.n	800324a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b2      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
 80031d8:	2302      	movs	r3, #2
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_ClockConfig+0x1a0>
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e00d      	b.n	800321c <HAL_RCC_ClockConfig+0x1bc>
 8003200:	2302      	movs	r3, #2
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	2302      	movs	r3, #2
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2202      	movs	r2, #2
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	fa92 f2a2 	rbit	r2, r2
 8003226:	617a      	str	r2, [r7, #20]
  return result;
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	fab2 f282 	clz	r2, r2
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	f002 021f 	and.w	r2, r2, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e079      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800325c:	f7fe fb5e 	bl	800191c <HAL_GetTick>
 8003260:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	e00a      	b.n	800327a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003264:	f7fe fb5a 	bl	800191c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e061      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 020c 	and.w	r2, r3, #12
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	429a      	cmp	r2, r3
 800328a:	d1eb      	bne.n	8003264 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d214      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4906      	ldr	r1, [pc, #24]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e040      	b.n	800333e <HAL_RCC_ClockConfig+0x2de>
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_ClockConfig+0x2e8>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	491a      	ldr	r1, [pc, #104]	; (8003348 <HAL_RCC_ClockConfig+0x2e8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x2e8>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4912      	ldr	r1, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x2e8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003302:	f000 f829 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCC_ClockConfig+0x2e8>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	22f0      	movs	r2, #240	; 0xf0
 8003312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	60fa      	str	r2, [r7, #12]
  return result;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	40d3      	lsrs	r3, r2
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x2ec>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	fa21 f303 	lsr.w	r3, r1, r3
 800332e:	4a08      	ldr	r2, [pc, #32]	; (8003350 <HAL_RCC_ClockConfig+0x2f0>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCC_ClockConfig+0x2f4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe faac 	bl	8001894 <HAL_InitTick>
  
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3778      	adds	r7, #120	; 0x78
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	0800608c 	.word	0x0800608c
 8003350:	20000004 	.word	0x20000004
 8003354:	20000008 	.word	0x20000008

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b08b      	sub	sp, #44	; 0x2c
 800335c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003372:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b04      	cmp	r3, #4
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x30>
 8003382:	2b08      	cmp	r3, #8
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x36>
 8003386:	e03f      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc8>)
 800338a:	623b      	str	r3, [r7, #32]
      break;
 800338c:	e03f      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003394:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003398:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	fa92 f2a2 	rbit	r2, r2
 80033a0:	607a      	str	r2, [r7, #4]
  return result;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	40d3      	lsrs	r3, r2
 80033ac:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	220f      	movs	r2, #15
 80033bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	fa92 f2a2 	rbit	r2, r2
 80033c4:	60fa      	str	r2, [r7, #12]
  return result;
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	fab2 f282 	clz	r2, r2
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	40d3      	lsrs	r3, r2
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e0:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
 80033f0:	e007      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	623b      	str	r3, [r7, #32]
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc8>)
 800340a:	623b      	str	r3, [r7, #32]
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6a3b      	ldr	r3, [r7, #32]
}
 8003410:	4618      	mov	r0, r3
 8003412:	372c      	adds	r7, #44	; 0x2c
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	080060a4 	.word	0x080060a4
 8003428:	080060b4 	.word	0x080060b4

0800342c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCC_GetHCLKFreq+0x14>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800344a:	f7ff ffef 	bl	800342c <HAL_RCC_GetHCLKFreq>
 800344e:	4601      	mov	r1, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003458:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800345c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	fa92 f2a2 	rbit	r2, r2
 8003464:	603a      	str	r2, [r7, #0]
  return result;
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	40d3      	lsrs	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	0800609c 	.word	0x0800609c

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800348e:	f7ff ffcd 	bl	800342c <HAL_RCC_GetHCLKFreq>
 8003492:	4601      	mov	r1, r0
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800349c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	603a      	str	r2, [r7, #0]
  return result;
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	40d3      	lsrs	r3, r2
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0800609c 	.word	0x0800609c

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b092      	sub	sp, #72	; 0x48
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80d4 	beq.w	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f0:	4b4e      	ldr	r3, [pc, #312]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10e      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	4a4a      	ldr	r2, [pc, #296]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003506:	61d3      	str	r3, [r2, #28]
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b45      	ldr	r3, [pc, #276]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b42      	ldr	r3, [pc, #264]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a41      	ldr	r2, [pc, #260]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fe f9f3 	bl	800191c <HAL_GetTick>
 8003536:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe f9ef 	bl	800191c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	; 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1d6      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8084 	beq.w	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003574:	429a      	cmp	r2, r3
 8003576:	d07c      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003578:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003586:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	461a      	mov	r2, r3
 80035a2:	2301      	movs	r3, #1
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	461a      	mov	r2, r3
 80035c6:	2300      	movs	r3, #0
 80035c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035ca:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04b      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe f99f 	bl	800191c <HAL_GetTick>
 80035de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe f99b 	bl	800191c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e180      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	2302      	movs	r3, #2
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	61fb      	str	r3, [r7, #28]
  return result;
 8003610:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d108      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003626:	4b01      	ldr	r3, [pc, #4]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	e00d      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	10908100 	.word	0x10908100
 8003638:	2302      	movs	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	4b9a      	ldr	r3, [pc, #616]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	613a      	str	r2, [r7, #16]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	fa92 f2a2 	rbit	r2, r2
 8003652:	60fa      	str	r2, [r7, #12]
  return result;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0b7      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003672:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	498c      	ldr	r1, [pc, #560]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003684:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4a87      	ldr	r2, [pc, #540]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a4:	4b82      	ldr	r3, [pc, #520]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	497f      	ldr	r1, [pc, #508]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c2:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4978      	ldr	r1, [pc, #480]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e0:	4b73      	ldr	r3, [pc, #460]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4970      	ldr	r1, [pc, #448]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fe:	4b6c      	ldr	r3, [pc, #432]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4969      	ldr	r1, [pc, #420]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800371c:	4b64      	ldr	r3, [pc, #400]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	4961      	ldr	r1, [pc, #388]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f023 0220 	bic.w	r2, r3, #32
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	495a      	ldr	r1, [pc, #360]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	4952      	ldr	r1, [pc, #328]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003776:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	494b      	ldr	r1, [pc, #300]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003794:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4943      	ldr	r1, [pc, #268]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	493c      	ldr	r1, [pc, #240]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037d0:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	4934      	ldr	r1, [pc, #208]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80037ee:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	492d      	ldr	r1, [pc, #180]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800380c:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	4925      	ldr	r1, [pc, #148]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800382a:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	491e      	ldr	r1, [pc, #120]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	490f      	ldr	r1, [pc, #60]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038a2:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b6:	4913      	ldr	r1, [pc, #76]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d4:	490b      	ldr	r1, [pc, #44]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3748      	adds	r7, #72	; 0x48
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e049      	b.n	80039ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fd0c 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fc1c 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e049      	b.n	8003a5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f841 	bl	8003a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fbc5 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x24>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e03c      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d109      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x3e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e02f      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d109      	bne.n	8003ad0 <HAL_TIM_PWM_Start+0x58>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e022      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d109      	bne.n	8003aea <HAL_TIM_PWM_Start+0x72>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e015      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x8c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0a1      	b.n	8003c62 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start+0xb6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	e023      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start+0xc6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	e01b      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0xd6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	e013      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xe6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b5c:	e00b      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0xf6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	e003      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	6839      	ldr	r1, [r7, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 ff3e 	bl	8004a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_TIM_PWM_Start+0x1f4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x148>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <HAL_TIM_PWM_Start+0x1f8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x148>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a35      	ldr	r2, [pc, #212]	; (8003c74 <HAL_TIM_PWM_Start+0x1fc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x148>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <HAL_TIM_PWM_Start+0x200>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x148>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_TIM_PWM_Start+0x204>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x148>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_TIM_PWM_Start+0x208>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIM_PWM_Start+0x14c>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_PWM_Start+0x14e>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <HAL_TIM_PWM_Start+0x1f4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d01d      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d018      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <HAL_TIM_PWM_Start+0x20c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_TIM_PWM_Start+0x210>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_TIM_PWM_Start+0x1f8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_TIM_PWM_Start+0x1fc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x1a8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_TIM_PWM_Start+0x208>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d115      	bne.n	8003c4c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_TIM_PWM_Start+0x214>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d015      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x1e6>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d011      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	e008      	b.n	8003c5e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800
 8003c80:	40015000 	.word	0x40015000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	00010007 	.word	0x00010007

08003c90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 feac 	bl	8004a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <HAL_TIM_PWM_Stop+0x120>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_TIM_PWM_Stop+0x54>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <HAL_TIM_PWM_Stop+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_TIM_PWM_Stop+0x54>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <HAL_TIM_PWM_Stop+0x128>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_TIM_PWM_Stop+0x54>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <HAL_TIM_PWM_Stop+0x12c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_TIM_PWM_Stop+0x54>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3a      	ldr	r2, [pc, #232]	; (8003dc0 <HAL_TIM_PWM_Stop+0x130>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIM_PWM_Stop+0x54>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <HAL_TIM_PWM_Stop+0x134>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_PWM_Stop+0x58>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_PWM_Stop+0x5a>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d017      	beq.n	8003d1e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_TIM_PWM_Stop+0x8e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	f240 4344 	movw	r3, #1092	; 0x444
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_PWM_Stop+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_TIM_PWM_Stop+0xbe>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	f240 4344 	movw	r3, #1092	; 0x444
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_PWM_Stop+0xbe>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Stop+0xce>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	e023      	b.n	8003da6 <HAL_TIM_PWM_Stop+0x116>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Stop+0xde>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	e01b      	b.n	8003da6 <HAL_TIM_PWM_Stop+0x116>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Stop+0xee>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_PWM_Stop+0x116>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Stop+0xfe>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_PWM_Stop+0x116>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Stop+0x10e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_PWM_Stop+0x116>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40015000 	.word	0x40015000

08003dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ff      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b14      	cmp	r3, #20
 8003df2:	f200 80f0 	bhi.w	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003fd7 	.word	0x08003fd7
 8003e04:	08003fd7 	.word	0x08003fd7
 8003e08:	08003fd7 	.word	0x08003fd7
 8003e0c:	08003e91 	.word	0x08003e91
 8003e10:	08003fd7 	.word	0x08003fd7
 8003e14:	08003fd7 	.word	0x08003fd7
 8003e18:	08003fd7 	.word	0x08003fd7
 8003e1c:	08003ed3 	.word	0x08003ed3
 8003e20:	08003fd7 	.word	0x08003fd7
 8003e24:	08003fd7 	.word	0x08003fd7
 8003e28:	08003fd7 	.word	0x08003fd7
 8003e2c:	08003f13 	.word	0x08003f13
 8003e30:	08003fd7 	.word	0x08003fd7
 8003e34:	08003fd7 	.word	0x08003fd7
 8003e38:	08003fd7 	.word	0x08003fd7
 8003e3c:	08003f55 	.word	0x08003f55
 8003e40:	08003fd7 	.word	0x08003fd7
 8003e44:	08003fd7 	.word	0x08003fd7
 8003e48:	08003fd7 	.word	0x08003fd7
 8003e4c:	08003f95 	.word	0x08003f95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa32 	bl	80042c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	619a      	str	r2, [r3, #24]
      break;
 8003e8e:	e0a5      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 faac 	bl	80043f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	021a      	lsls	r2, r3, #8
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
      break;
 8003ed0:	e084      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fb1f 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0208 	orr.w	r2, r2, #8
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      break;
 8003f10:	e064      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fb91 	bl	8004640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
      break;
 8003f52:	e043      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fbe0 	bl	8004720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f92:	e023      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fc2a 	bl	80047f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fd4:	e002      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b6      	b.n	800417a <HAL_TIM_ConfigClockSource+0x18a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800402e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d03e      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xd8>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	f200 8087 	bhi.w	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	f000 8086 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x176>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d87f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d01a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xaa>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d87b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d050      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x11e>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d877      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004070:	2b50      	cmp	r3, #80	; 0x50
 8004072:	d03c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xfe>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d873      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d058      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x13e>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d86f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d064      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15e>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d86b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d060      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15e>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d867      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05c      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15e>
 8004094:	2b10      	cmp	r3, #16
 8004096:	d05a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15e>
 8004098:	e062      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f000 fc89 	bl	80049c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]
      break;
 80040c6:	e04f      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f000 fc72 	bl	80049c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ea:	609a      	str	r2, [r3, #8]
      break;
 80040ec:	e03c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f000 fbe6 	bl	80048cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2150      	movs	r1, #80	; 0x50
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fc3f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 800410c:	e02c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	461a      	mov	r2, r3
 800411c:	f000 fc05 	bl	800492a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2160      	movs	r1, #96	; 0x60
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fc2f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 800412c:	e01c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	461a      	mov	r2, r3
 800413c:	f000 fbc6 	bl	80048cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fc1f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 800414c:	e00c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f000 fc16 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 800415e:	e003      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e000      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a42      	ldr	r2, [pc, #264]	; (80042a0 <TIM_Base_SetConfig+0x11c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d00f      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <TIM_Base_SetConfig+0x120>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <TIM_Base_SetConfig+0x128>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3c      	ldr	r2, [pc, #240]	; (80042b0 <TIM_Base_SetConfig+0x12c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d108      	bne.n	80041d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a31      	ldr	r2, [pc, #196]	; (80042a0 <TIM_Base_SetConfig+0x11c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01f      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d01b      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2e      	ldr	r2, [pc, #184]	; (80042a4 <TIM_Base_SetConfig+0x120>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d017      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <TIM_Base_SetConfig+0x124>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <TIM_Base_SetConfig+0x128>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00f      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <TIM_Base_SetConfig+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2b      	ldr	r2, [pc, #172]	; (80042b8 <TIM_Base_SetConfig+0x134>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2a      	ldr	r2, [pc, #168]	; (80042bc <TIM_Base_SetConfig+0x138>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <TIM_Base_SetConfig+0x12c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <TIM_Base_SetConfig+0x11c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <TIM_Base_SetConfig+0x100>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <TIM_Base_SetConfig+0x128>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x100>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <TIM_Base_SetConfig+0x130>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x100>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <TIM_Base_SetConfig+0x134>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x100>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <TIM_Base_SetConfig+0x138>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x100>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <TIM_Base_SetConfig+0x12c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40015000 	.word	0x40015000
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800

080042c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 0302 	bic.w	r3, r3, #2
 800430c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a30      	ldr	r2, [pc, #192]	; (80043dc <TIM_OC1_SetConfig+0x11c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_OC1_SetConfig+0x88>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <TIM_OC1_SetConfig+0x120>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00f      	beq.n	8004348 <TIM_OC1_SetConfig+0x88>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <TIM_OC1_SetConfig+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_OC1_SetConfig+0x88>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <TIM_OC1_SetConfig+0x128>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_OC1_SetConfig+0x88>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <TIM_OC1_SetConfig+0x12c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC1_SetConfig+0x88>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <TIM_OC1_SetConfig+0x130>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10c      	bne.n	8004362 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0308 	bic.w	r3, r3, #8
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <TIM_OC1_SetConfig+0x11c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <TIM_OC1_SetConfig+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <TIM_OC1_SetConfig+0x120>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_OC1_SetConfig+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <TIM_OC1_SetConfig+0x124>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_OC1_SetConfig+0xd2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <TIM_OC1_SetConfig+0x128>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC1_SetConfig+0xd2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <TIM_OC1_SetConfig+0x12c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC1_SetConfig+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <TIM_OC1_SetConfig+0x130>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800
 80043f0:	40015000 	.word	0x40015000

080043f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0210 	bic.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_OC2_SetConfig+0x110>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_OC2_SetConfig+0x74>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <TIM_OC2_SetConfig+0x114>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC2_SetConfig+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2a      	ldr	r2, [pc, #168]	; (800450c <TIM_OC2_SetConfig+0x118>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10d      	bne.n	8004484 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <TIM_OC2_SetConfig+0x110>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <TIM_OC2_SetConfig+0xc0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <TIM_OC2_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00f      	beq.n	80044b4 <TIM_OC2_SetConfig+0xc0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <TIM_OC2_SetConfig+0x11c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_OC2_SetConfig+0xc0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <TIM_OC2_SetConfig+0x120>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_OC2_SetConfig+0xc0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <TIM_OC2_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_OC2_SetConfig+0xc0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <TIM_OC2_SetConfig+0x118>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d113      	bne.n	80044dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40015000 	.word	0x40015000
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <TIM_OC3_SetConfig+0x10c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_OC3_SetConfig+0x72>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_OC3_SetConfig+0x110>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_OC3_SetConfig+0x72>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_OC3_SetConfig+0x114>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <TIM_OC3_SetConfig+0x10c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_OC3_SetConfig+0xbe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <TIM_OC3_SetConfig+0x110>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_OC3_SetConfig+0xbe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <TIM_OC3_SetConfig+0x118>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_OC3_SetConfig+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <TIM_OC3_SetConfig+0x11c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC3_SetConfig+0xbe>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <TIM_OC3_SetConfig+0x120>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC3_SetConfig+0xbe>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <TIM_OC3_SetConfig+0x114>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40015000 	.word	0x40015000
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800

08004640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800468e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <TIM_OC4_SetConfig+0xc8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <TIM_OC4_SetConfig+0x8c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <TIM_OC4_SetConfig+0xcc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00f      	beq.n	80046cc <TIM_OC4_SetConfig+0x8c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <TIM_OC4_SetConfig+0xd0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_OC4_SetConfig+0x8c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <TIM_OC4_SetConfig+0xd4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_OC4_SetConfig+0x8c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	; (8004718 <TIM_OC4_SetConfig+0xd8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC4_SetConfig+0x8c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <TIM_OC4_SetConfig+0xdc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d109      	bne.n	80046e0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	019b      	lsls	r3, r3, #6
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40013400 	.word	0x40013400
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800
 800471c:	40015000 	.word	0x40015000

08004720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <TIM_OC5_SetConfig+0xbc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <TIM_OC5_SetConfig+0x82>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <TIM_OC5_SetConfig+0xc0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <TIM_OC5_SetConfig+0x82>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <TIM_OC5_SetConfig+0xc4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_OC5_SetConfig+0x82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <TIM_OC5_SetConfig+0xc8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_OC5_SetConfig+0x82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <TIM_OC5_SetConfig+0xcc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC5_SetConfig+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <TIM_OC5_SetConfig+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d109      	bne.n	80047b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40015000 	.word	0x40015000

080047f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	051b      	lsls	r3, r3, #20
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <TIM_OC6_SetConfig+0xc0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_OC6_SetConfig+0x84>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <TIM_OC6_SetConfig+0xc4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00f      	beq.n	8004878 <TIM_OC6_SetConfig+0x84>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <TIM_OC6_SetConfig+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_OC6_SetConfig+0x84>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <TIM_OC6_SetConfig+0xcc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_OC6_SetConfig+0x84>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <TIM_OC6_SetConfig+0xd0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_OC6_SetConfig+0x84>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <TIM_OC6_SetConfig+0xd4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d109      	bne.n	800488c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	40015000 	.word	0x40015000

080048cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 030a 	bic.w	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f023 0210 	bic.w	r2, r3, #16
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2201      	movs	r2, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e06d      	b.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2f      	ldr	r2, [pc, #188]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d01d      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d018      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10c      	bne.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40013400 	.word	0x40013400
 8004b54:	40015000 	.word	0x40015000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40014000 	.word	0x40014000

08004b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e06a      	b.n	8004c56 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d115      	bne.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	051b      	lsls	r3, r3, #20
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40015000 	.word	0x40015000

08004c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e040      	b.n	8004d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fd1a 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb78 	bl	80053a4 <UART_SetConfig>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e022      	b.n	8004d04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fd42 	bl	8005750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fdc9 	bl	8005894 <UART_CheckIdleState>
 8004d02:	4603      	mov	r3, r0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d13d      	bne.n	8004d9e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_UART_Receive_IT+0x22>
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e036      	b.n	8004da0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Receive_IT+0x34>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e02f      	b.n	8004da0 <HAL_UART_Receive_IT+0x94>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d018      	beq.n	8004d8e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	69f9      	ldr	r1, [r7, #28]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e6      	bne.n	8004d5c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fe8b 	bl	8005ab0 <UART_Start_Receive_IT>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3728      	adds	r7, #40	; 0x28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	; 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d115      	bne.n	8004e10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 82a3 	beq.w	800534c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
      }
      return;
 8004e0e:	e29d      	b.n	800534c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8117 	beq.w	8005048 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e2a:	4b85      	ldr	r3, [pc, #532]	; (8005040 <HAL_UART_IRQHandler+0x298>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 810a 	beq.w	8005048 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <HAL_UART_IRQHandler+0xbc>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d011      	beq.n	8004e94 <HAL_UART_IRQHandler+0xec>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2202      	movs	r2, #2
 8004e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d011      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x11c>
 8004ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eba:	f043 0202 	orr.w	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d017      	beq.n	8004f00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2208      	movs	r2, #8
 8004eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	f043 0208 	orr.w	r2, r3, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <HAL_UART_IRQHandler+0x18a>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8209 	beq.w	8005350 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04f      	beq.n	800502a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fe3c 	bl	8005c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d141      	bne.n	8005022 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1d9      	bne.n	8004f9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d013      	beq.n	800501a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <HAL_UART_IRQHandler+0x29c>)
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fde2 	bl	8001bc8 <HAL_DMA_Abort_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d017      	beq.n	800503a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e00f      	b.n	800503a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9ac 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	e00b      	b.n	800503a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9a8 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e007      	b.n	800503a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9a4 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005038:	e18a      	b.n	8005350 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503a:	bf00      	nop
    return;
 800503c:	e188      	b.n	8005350 <HAL_UART_IRQHandler+0x5a8>
 800503e:	bf00      	nop
 8005040:	04000120 	.word	0x04000120
 8005044:	08005ccf 	.word	0x08005ccf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 8143 	bne.w	80052d8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 813c 	beq.w	80052d8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8135 	beq.w	80052d8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2210      	movs	r2, #16
 8005074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	f040 80b1 	bne.w	80051e8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005092:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 815c 	beq.w	8005354 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a6:	429a      	cmp	r2, r3
 80050a8:	f080 8154 	bcs.w	8005354 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b20      	cmp	r3, #32
 80050be:	f000 8085 	beq.w	80051cc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1da      	bne.n	80050c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800511c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3308      	adds	r3, #8
 800512c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005130:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005134:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e1      	bne.n	800510c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800516c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800516e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e3      	bne.n	8005148 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800519a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519c:	f023 0310 	bic.w	r3, r3, #16
 80051a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80051b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fc fcc5 	bl	8001b56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8d3 	bl	800538c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e6:	e0b5      	b.n	8005354 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a7 	beq.w	8005358 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800520a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80a2 	beq.w	8005358 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005236:	647b      	str	r3, [r7, #68]	; 0x44
 8005238:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e4      	bne.n	8005214 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	623b      	str	r3, [r7, #32]
   return(result);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800526e:	633a      	str	r2, [r7, #48]	; 0x30
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	617b      	str	r3, [r7, #20]
   return(result);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e4      	bne.n	8005294 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f85b 	bl	800538c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052d6:	e03f      	b.n	8005358 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00e      	beq.n	8005302 <HAL_UART_IRQHandler+0x55a>
 80052e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fe83 	bl	8006006 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005300:	e02d      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00e      	beq.n	800532c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800530e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01c      	beq.n	800535c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
    }
    return;
 800532a:	e017      	b.n	800535c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_UART_IRQHandler+0x5b6>
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fcd8 	bl	8005cfa <UART_EndTransmit_IT>
    return;
 800534a:	e008      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
      return;
 800534c:	bf00      	nop
 800534e:	e006      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005350:	bf00      	nop
 8005352:	e004      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005354:	bf00      	nop
 8005356:	e002      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005358:	bf00      	nop
 800535a:	e000      	b.n	800535e <HAL_UART_IRQHandler+0x5b6>
    return;
 800535c:	bf00      	nop
  }

}
 800535e:	37e8      	adds	r7, #232	; 0xe8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b92      	ldr	r3, [pc, #584]	; (8005618 <UART_SetConfig+0x274>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	6979      	ldr	r1, [r7, #20]
 80053d8:	430b      	orrs	r3, r1
 80053da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a80      	ldr	r2, [pc, #512]	; (800561c <UART_SetConfig+0x278>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d120      	bne.n	8005462 <UART_SetConfig+0xbe>
 8005420:	4b7f      	ldr	r3, [pc, #508]	; (8005620 <UART_SetConfig+0x27c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b03      	cmp	r3, #3
 800542a:	d817      	bhi.n	800545c <UART_SetConfig+0xb8>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0x90>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005445 	.word	0x08005445
 8005438:	08005451 	.word	0x08005451
 800543c:	08005457 	.word	0x08005457
 8005440:	0800544b 	.word	0x0800544b
 8005444:	2301      	movs	r3, #1
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e0b5      	b.n	80055b6 <UART_SetConfig+0x212>
 800544a:	2302      	movs	r3, #2
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e0b2      	b.n	80055b6 <UART_SetConfig+0x212>
 8005450:	2304      	movs	r3, #4
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e0af      	b.n	80055b6 <UART_SetConfig+0x212>
 8005456:	2308      	movs	r3, #8
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0ac      	b.n	80055b6 <UART_SetConfig+0x212>
 800545c:	2310      	movs	r3, #16
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e0a9      	b.n	80055b6 <UART_SetConfig+0x212>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6f      	ldr	r2, [pc, #444]	; (8005624 <UART_SetConfig+0x280>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d124      	bne.n	80054b6 <UART_SetConfig+0x112>
 800546c:	4b6c      	ldr	r3, [pc, #432]	; (8005620 <UART_SetConfig+0x27c>)
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005474:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005478:	d011      	beq.n	800549e <UART_SetConfig+0xfa>
 800547a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800547e:	d817      	bhi.n	80054b0 <UART_SetConfig+0x10c>
 8005480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005484:	d011      	beq.n	80054aa <UART_SetConfig+0x106>
 8005486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548a:	d811      	bhi.n	80054b0 <UART_SetConfig+0x10c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <UART_SetConfig+0xf4>
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d006      	beq.n	80054a4 <UART_SetConfig+0x100>
 8005496:	e00b      	b.n	80054b0 <UART_SetConfig+0x10c>
 8005498:	2300      	movs	r3, #0
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e08b      	b.n	80055b6 <UART_SetConfig+0x212>
 800549e:	2302      	movs	r3, #2
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e088      	b.n	80055b6 <UART_SetConfig+0x212>
 80054a4:	2304      	movs	r3, #4
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e085      	b.n	80055b6 <UART_SetConfig+0x212>
 80054aa:	2308      	movs	r3, #8
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e082      	b.n	80055b6 <UART_SetConfig+0x212>
 80054b0:	2310      	movs	r3, #16
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e07f      	b.n	80055b6 <UART_SetConfig+0x212>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5b      	ldr	r2, [pc, #364]	; (8005628 <UART_SetConfig+0x284>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d124      	bne.n	800550a <UART_SetConfig+0x166>
 80054c0:	4b57      	ldr	r3, [pc, #348]	; (8005620 <UART_SetConfig+0x27c>)
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054cc:	d011      	beq.n	80054f2 <UART_SetConfig+0x14e>
 80054ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054d2:	d817      	bhi.n	8005504 <UART_SetConfig+0x160>
 80054d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054d8:	d011      	beq.n	80054fe <UART_SetConfig+0x15a>
 80054da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054de:	d811      	bhi.n	8005504 <UART_SetConfig+0x160>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <UART_SetConfig+0x148>
 80054e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e8:	d006      	beq.n	80054f8 <UART_SetConfig+0x154>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x160>
 80054ec:	2300      	movs	r3, #0
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e061      	b.n	80055b6 <UART_SetConfig+0x212>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e05e      	b.n	80055b6 <UART_SetConfig+0x212>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e05b      	b.n	80055b6 <UART_SetConfig+0x212>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e058      	b.n	80055b6 <UART_SetConfig+0x212>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e055      	b.n	80055b6 <UART_SetConfig+0x212>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a47      	ldr	r2, [pc, #284]	; (800562c <UART_SetConfig+0x288>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d124      	bne.n	800555e <UART_SetConfig+0x1ba>
 8005514:	4b42      	ldr	r3, [pc, #264]	; (8005620 <UART_SetConfig+0x27c>)
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800551c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005520:	d011      	beq.n	8005546 <UART_SetConfig+0x1a2>
 8005522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005526:	d817      	bhi.n	8005558 <UART_SetConfig+0x1b4>
 8005528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552c:	d011      	beq.n	8005552 <UART_SetConfig+0x1ae>
 800552e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005532:	d811      	bhi.n	8005558 <UART_SetConfig+0x1b4>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <UART_SetConfig+0x19c>
 8005538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553c:	d006      	beq.n	800554c <UART_SetConfig+0x1a8>
 800553e:	e00b      	b.n	8005558 <UART_SetConfig+0x1b4>
 8005540:	2300      	movs	r3, #0
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e037      	b.n	80055b6 <UART_SetConfig+0x212>
 8005546:	2302      	movs	r3, #2
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e034      	b.n	80055b6 <UART_SetConfig+0x212>
 800554c:	2304      	movs	r3, #4
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e031      	b.n	80055b6 <UART_SetConfig+0x212>
 8005552:	2308      	movs	r3, #8
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e02e      	b.n	80055b6 <UART_SetConfig+0x212>
 8005558:	2310      	movs	r3, #16
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e02b      	b.n	80055b6 <UART_SetConfig+0x212>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a33      	ldr	r2, [pc, #204]	; (8005630 <UART_SetConfig+0x28c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d124      	bne.n	80055b2 <UART_SetConfig+0x20e>
 8005568:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <UART_SetConfig+0x27c>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005574:	d011      	beq.n	800559a <UART_SetConfig+0x1f6>
 8005576:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800557a:	d817      	bhi.n	80055ac <UART_SetConfig+0x208>
 800557c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005580:	d011      	beq.n	80055a6 <UART_SetConfig+0x202>
 8005582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005586:	d811      	bhi.n	80055ac <UART_SetConfig+0x208>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <UART_SetConfig+0x1f0>
 800558c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005590:	d006      	beq.n	80055a0 <UART_SetConfig+0x1fc>
 8005592:	e00b      	b.n	80055ac <UART_SetConfig+0x208>
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e00d      	b.n	80055b6 <UART_SetConfig+0x212>
 800559a:	2302      	movs	r3, #2
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e00a      	b.n	80055b6 <UART_SetConfig+0x212>
 80055a0:	2304      	movs	r3, #4
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e007      	b.n	80055b6 <UART_SetConfig+0x212>
 80055a6:	2308      	movs	r3, #8
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e004      	b.n	80055b6 <UART_SetConfig+0x212>
 80055ac:	2310      	movs	r3, #16
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e001      	b.n	80055b6 <UART_SetConfig+0x212>
 80055b2:	2310      	movs	r3, #16
 80055b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055be:	d16c      	bne.n	800569a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d838      	bhi.n	8005638 <UART_SetConfig+0x294>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x228>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005639 	.word	0x08005639
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005639 	.word	0x08005639
 80055e4:	08005639 	.word	0x08005639
 80055e8:	08005639 	.word	0x08005639
 80055ec:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fd ff28 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 80055f4:	61b8      	str	r0, [r7, #24]
        break;
 80055f6:	e024      	b.n	8005642 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fd ff46 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80055fc:	61b8      	str	r0, [r7, #24]
        break;
 80055fe:	e020      	b.n	8005642 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <UART_SetConfig+0x290>)
 8005602:	61bb      	str	r3, [r7, #24]
        break;
 8005604:	e01d      	b.n	8005642 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005606:	f7fd fea7 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 800560a:	61b8      	str	r0, [r7, #24]
        break;
 800560c:	e019      	b.n	8005642 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005612:	61bb      	str	r3, [r7, #24]
        break;
 8005614:	e015      	b.n	8005642 <UART_SetConfig+0x29e>
 8005616:	bf00      	nop
 8005618:	efff69f3 	.word	0xefff69f3
 800561c:	40013800 	.word	0x40013800
 8005620:	40021000 	.word	0x40021000
 8005624:	40004400 	.word	0x40004400
 8005628:	40004800 	.word	0x40004800
 800562c:	40004c00 	.word	0x40004c00
 8005630:	40005000 	.word	0x40005000
 8005634:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	77bb      	strb	r3, [r7, #30]
        break;
 8005640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d075      	beq.n	8005734 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	005a      	lsls	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	b29b      	uxth	r3, r3
 800565e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d916      	bls.n	8005694 <UART_SetConfig+0x2f0>
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566c:	d212      	bcs.n	8005694 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f023 030f 	bic.w	r3, r3, #15
 8005676:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	085b      	lsrs	r3, r3, #1
 800567c:	b29b      	uxth	r3, r3
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	b29a      	uxth	r2, r3
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	4313      	orrs	r3, r2
 8005688:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	89fa      	ldrh	r2, [r7, #14]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	e04f      	b.n	8005734 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	77bb      	strb	r3, [r7, #30]
 8005698:	e04c      	b.n	8005734 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800569a:	7ffb      	ldrb	r3, [r7, #31]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d828      	bhi.n	80056f2 <UART_SetConfig+0x34e>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x304>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056e3 	.word	0x080056e3
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fd feba 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 80056d0:	61b8      	str	r0, [r7, #24]
        break;
 80056d2:	e013      	b.n	80056fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fd fed8 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b1b      	ldr	r3, [pc, #108]	; (800574c <UART_SetConfig+0x3a8>)
 80056de:	61bb      	str	r3, [r7, #24]
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fd fe39 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 80056e6:	61b8      	str	r0, [r7, #24]
        break;
 80056e8:	e008      	b.n	80056fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	61bb      	str	r3, [r7, #24]
        break;
 80056f0:	e004      	b.n	80056fc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	77bb      	strb	r3, [r7, #30]
        break;
 80056fa:	bf00      	nop
    }

    if (pclk != 0U)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085a      	lsrs	r2, r3, #1
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	441a      	add	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	b29b      	uxth	r3, r3
 8005716:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b0f      	cmp	r3, #15
 800571c:	d908      	bls.n	8005730 <UART_SetConfig+0x38c>
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005724:	d204      	bcs.n	8005730 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e001      	b.n	8005734 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005740:	7fbb      	ldrb	r3, [r7, #30]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	007a1200 	.word	0x007a1200

08005750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d10a      	bne.n	8005866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058a4:	f7fc f83a 	bl	800191c <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10e      	bne.n	80058d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f82d 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e023      	b.n	800591e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d10e      	bne.n	8005902 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f817 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e00d      	b.n	800591e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b09c      	sub	sp, #112	; 0x70
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005936:	e0a5      	b.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	f000 80a1 	beq.w	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7fb ffeb 	bl	800191c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <UART_WaitOnFlagUntilTimeout+0x32>
 8005952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005954:	2b00      	cmp	r3, #0
 8005956:	d13e      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596c:	667b      	str	r3, [r7, #100]	; 0x64
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005978:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800597c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	663b      	str	r3, [r7, #96]	; 0x60
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80059ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e067      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d04f      	beq.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d147      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a50:	623a      	str	r2, [r7, #32]
 8005a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e010      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	f43f af4a 	beq.w	8005938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3770      	adds	r7, #112	; 0x70
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b091      	sub	sp, #68	; 0x44
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d10e      	bne.n	8005b02 <UART_Start_Receive_IT+0x52>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <UART_Start_Receive_IT+0x48>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005af6:	e02d      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b00:	e028      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <UART_Start_Receive_IT+0x76>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <UART_Start_Receive_IT+0x6c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b1a:	e01b      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	227f      	movs	r2, #127	; 0x7f
 8005b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b24:	e016      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2e:	d10d      	bne.n	8005b4c <UART_Start_Receive_IT+0x9c>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <UART_Start_Receive_IT+0x92>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	227f      	movs	r2, #127	; 0x7f
 8005b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b40:	e008      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	223f      	movs	r2, #63	; 0x3f
 8005b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b4a:	e003      	b.n	8005b54 <UART_Start_Receive_IT+0xa4>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2222      	movs	r2, #34	; 0x22
 8005b60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b82:	637a      	str	r2, [r7, #52]	; 0x34
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d107      	bne.n	8005bb0 <UART_Start_Receive_IT+0x100>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <UART_Start_Receive_IT+0x150>)
 8005bac:	665a      	str	r2, [r3, #100]	; 0x64
 8005bae:	e002      	b.n	8005bb6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <UART_Start_Receive_IT+0x154>)
 8005bb4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e6      	bne.n	8005bbe <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3744      	adds	r7, #68	; 0x44
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	08005eab 	.word	0x08005eab
 8005c04:	08005d4f 	.word	0x08005d4f

08005c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b095      	sub	sp, #84	; 0x54
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d118      	bne.n	8005cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f023 0310 	bic.w	r3, r3, #16
 8005c92:	647b      	str	r3, [r7, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6979      	ldr	r1, [r7, #20]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005cc2:	bf00      	nop
 8005cc4:	3754      	adds	r7, #84	; 0x54
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fb43 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf2:	bf00      	nop
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fb0f 	bl	8005364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d46:	bf00      	nop
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b096      	sub	sp, #88	; 0x58
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d64:	2b22      	cmp	r3, #34	; 0x22
 8005d66:	f040 8094 	bne.w	8005e92 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d70:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d84:	400a      	ands	r2, r1
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d177      	bne.n	8005ea2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	623b      	str	r3, [r7, #32]
   return(result);
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e04:	633a      	str	r2, [r7, #48]	; 0x30
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d12e      	bne.n	8005e8a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e6      	bne.n	8005e32 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d103      	bne.n	8005e7a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fa82 	bl	800538c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e88:	e00b      	b.n	8005ea2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fb f8f4 	bl	8001078 <HAL_UART_RxCpltCallback>
}
 8005e90:	e007      	b.n	8005ea2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0208 	orr.w	r2, r2, #8
 8005ea0:	619a      	str	r2, [r3, #24]
}
 8005ea2:	bf00      	nop
 8005ea4:	3758      	adds	r7, #88	; 0x58
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b096      	sub	sp, #88	; 0x58
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005eb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec0:	2b22      	cmp	r3, #34	; 0x22
 8005ec2:	f040 8094 	bne.w	8005fee <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ecc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ed6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005eda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ede:	4013      	ands	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	1c9a      	adds	r2, r3, #2
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d177      	bne.n	8005ffe <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d12e      	bne.n	8005fe6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d103      	bne.n	8005fd6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff f9d4 	bl	800538c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe4:	e00b      	b.n	8005ffe <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fb f846 	bl	8001078 <HAL_UART_RxCpltCallback>
}
 8005fec:	e007      	b.n	8005ffe <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0208 	orr.w	r2, r2, #8
 8005ffc:	619a      	str	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	3758      	adds	r7, #88	; 0x58
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	; (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	; (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x44>)
 8006030:	f000 f820 	bl	8006074 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	080060c4 	.word	0x080060c4
 8006058:	080060c4 	.word	0x080060c4
 800605c:	080060c4 	.word	0x080060c4
 8006060:	080060c8 	.word	0x080060c8

08006064 <memset>:
 8006064:	4402      	add	r2, r0
 8006066:	4603      	mov	r3, r0
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	f803 1b01 	strb.w	r1, [r3], #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <_init>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr

08006080 <_fini>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr
